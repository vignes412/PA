{"version":3,"file":"MuscleFatiguePage-Db9aic3N.js","sources":["../../node_modules/lucide-react/dist/esm/icons/calendar.js","../../node_modules/lucide-react/dist/esm/icons/info.js","../../node_modules/lucide-react/dist/esm/icons/triangle-alert.js","../../src/utils/muscleFatigueCalculator.ts","../../src/components/workout/WorkoutRecommender.tsx","../../src/components/workout/MuscleFatigueAnalytics.tsx","../../src/components/workout/AllFatigueInsights.tsx","../../src/views/MuscleFatiguePage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M8 2v4\", key: \"1cmpym\" }],\n  [\"path\", { d: \"M16 2v4\", key: \"4m81vk\" }],\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"4\", rx: \"2\", key: \"1hopcy\" }],\n  [\"path\", { d: \"M3 10h18\", key: \"8toen8\" }]\n];\nconst Calendar = createLucideIcon(\"calendar\", __iconNode);\n\nexport { __iconNode, Calendar as default };\n//# sourceMappingURL=calendar.js.map\n","/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M12 16v-4\", key: \"1dtifu\" }],\n  [\"path\", { d: \"M12 8h.01\", key: \"e9boi3\" }]\n];\nconst Info = createLucideIcon(\"info\", __iconNode);\n\nexport { __iconNode, Info as default };\n//# sourceMappingURL=info.js.map\n","/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\n    \"path\",\n    {\n      d: \"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\",\n      key: \"wmoenq\"\n    }\n  ],\n  [\"path\", { d: \"M12 9v4\", key: \"juzpu7\" }],\n  [\"path\", { d: \"M12 17h.01\", key: \"p32p05\" }]\n];\nconst TriangleAlert = createLucideIcon(\"triangle-alert\", __iconNode);\n\nexport { __iconNode, TriangleAlert as default };\n//# sourceMappingURL=triangle-alert.js.map\n","// src/utils/muscleFatigueCalculator.ts\r\nimport { WorkoutLogEntry } from '@/types/Workout_Log';\r\nimport type { FatigueSettings } from '@/contexts/FatigueSettingsContext';\r\nimport { SleepLogEntry, SleepRecoveryData } from '@/types/Sleep_Log';\r\nimport { calculateSleepRecoveryImpact } from '@/utils/sleepCalculator';\r\n\r\nexport interface MuscleFatigueData {\r\n  muscleGroup: string;\r\n  fatigue: number;\r\n  lastTrainingDate: string | null;\r\n  recoveryStatus: 'Ready' | 'Recovering' | 'Fatigued';\r\n  suggestedRestDays: number;\r\n}\r\n\r\ninterface MuscleTrainingData {\r\n  lastTrainingDate: string;\r\n  recentVolume: number;\r\n  recentIntensity: number;\r\n}\r\n\r\n// Extended interfaces for advanced analytics\r\nexport interface MuscleRecoveryProfile {\r\n  muscleGroup: string;\r\n  baseRecoveryRate: number;\r\n  personalizedRecoveryRate: number;\r\n  optimalTrainingFrequency: number;\r\n  averageRecoveryDays: number;\r\n  lastWorkouts: WorkoutLogEntry[];\r\n}\r\n\r\nexport interface FatigueInsight {\r\n  muscleGroup: string;\r\n  insight: string;\r\n  type: 'positive' | 'warning' | 'info';\r\n  suggestion: string;\r\n}\r\n\r\n// Constants for fatigue calculation (will be replaced by user settings)\r\n// These serve as defaults when no settings are provided\r\nconst DEFAULT_MAX_FATIGUE = 100;\r\nconst DEFAULT_RECOVERY_RATE = 15; // % recovery per day\r\nconst DEFAULT_FATIGUE_THRESHOLD = {\r\n  low: 20,    // Ready to train (updated to match interface)\r\n  medium: 60, // Recovering but can train (updated to match interface)\r\n  high: 80    // Needs rest (updated to match interface)\r\n};\r\n\r\n/**\r\n * Calculates muscle fatigue and recovery status based on recent workout history\r\n * @param logs Array of workout logs\r\n * @param daysToConsider Days of workout history to consider for fatigue calculation (default: 7)\r\n * @param settings Optional fatigue settings to override defaults\r\n * @param sleepLogs Optional sleep logs to enhance recovery calculations\r\n * @returns Array of muscle groups with their fatigue and recovery status\r\n */\r\nexport function calculateMuscleFatigue(\r\n  logs: WorkoutLogEntry[],\r\n  daysToConsider: number = 7,\r\n  settings?: FatigueSettings,\r\n  sleepLogs?: SleepLogEntry[]\r\n): MuscleFatigueData[] {\r\n  if (!logs || logs.length === 0) return [];\r\n\r\n  // Use provided settings or defaults\r\n  const maxFatigue = settings?.maxFatigue ?? DEFAULT_MAX_FATIGUE;\r\n  const recoveryRate = settings?.recoveryRate ?? DEFAULT_RECOVERY_RATE;\r\n  const thresholds = settings?.thresholds ?? DEFAULT_FATIGUE_THRESHOLD;\r\n  const daysToUse = settings?.daysToConsider ?? daysToConsider;\r\n\r\n  // Get current date\r\n  const currentDate = new Date();\r\n  \r\n  // Calculate cutoff date using configurable days\r\n  const cutoffDate = new Date(currentDate);\r\n  cutoffDate.setDate(currentDate.getDate() - daysToUse);\r\n  \r\n  // Filter logs to only include recent ones\r\n  const recentLogs = logs.filter(log => {\r\n    const logDate = new Date(log.date);\r\n    return logDate >= cutoffDate;\r\n  });\r\n  \r\n  // Find all unique muscle groups\r\n  const muscleGroups = [...new Set(recentLogs.map(log => log.muscleGroup))];\r\n  \r\n  // Calculate the muscle group training data from logs\r\n  const muscleTrainingData: Record<string, MuscleTrainingData> = {};\r\n  \r\n  recentLogs.forEach(log => {\r\n    const group = log.muscleGroup;\r\n    const logDate = new Date(log.date);\r\n    const volume = (log.weight || 0) * (log.reps || 0);\r\n    const intensity = log.rating || 5; // Default to medium intensity if not provided\r\n    \r\n    if (!muscleTrainingData[group] || new Date(muscleTrainingData[group].lastTrainingDate) < logDate) {\r\n      // Initialize or update if this is a more recent training\r\n      muscleTrainingData[group] = {\r\n        lastTrainingDate: log.date,\r\n        recentVolume: volume,\r\n        recentIntensity: intensity\r\n      };\r\n    } else {\r\n      // Accumulate volume and intensity if same date\r\n      if (muscleTrainingData[group].lastTrainingDate === log.date) {\r\n        muscleTrainingData[group].recentVolume += volume;\r\n        muscleTrainingData[group].recentIntensity = Math.max(muscleTrainingData[group].recentIntensity, intensity);\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Calculate maximum volume achieved by any muscle group in the period\r\n  const maxVolume = Math.max(\r\n    1, // Prevent division by zero\r\n    ...Object.values(muscleTrainingData).map(data => data.recentVolume)\r\n  );\r\n  \r\n  // Calculate fatigue for each muscle group\r\n  return muscleGroups.map(group => {\r\n    const data = muscleTrainingData[group] || {\r\n      lastTrainingDate: null,\r\n      recentVolume: 0,\r\n      recentIntensity: 0\r\n    };\r\n    \r\n    let fatigue = (data.recentVolume / maxVolume) * 100; // Base fatigue on relative volume\r\n    \r\n    // Adjust fatigue based on intensity\r\n    fatigue = fatigue * (data.recentIntensity / 5); // Scale by intensity\r\n      // Apply recovery based on days since last training\r\n    if (data.lastTrainingDate) {\r\n      const daysSinceTraining = Math.floor(\r\n        (currentDate.getTime() - new Date(data.lastTrainingDate).getTime()) / \r\n        (1000 * 60 * 60 * 24)\r\n      );\r\n      \r\n      // Calculate base recovery using configurable recovery rate\r\n      let totalRecovery = daysSinceTraining * recoveryRate;\r\n      \r\n      // Enhance recovery with sleep data if available\r\n      if (sleepLogs && sleepLogs.length > 0) {\r\n        // Apply sleep recovery for each day since last training\r\n        for (let day = 1; day <= daysSinceTraining; day++) {\r\n          const recoveryDate = new Date(data.lastTrainingDate);\r\n          recoveryDate.setDate(recoveryDate.getDate() + day);\r\n          const dateStr = recoveryDate.toISOString().split('T')[0];\r\n          \r\n          const sleepRecovery = calculateSleepRecoveryImpact(sleepLogs, dateStr);\r\n          if (sleepRecovery) {\r\n            // Add sleep-enhanced recovery bonus (additional recovery beyond base rate)\r\n            totalRecovery += sleepRecovery.fatigueReduction * 0.5; // 50% of sleep benefit applies to muscle fatigue\r\n          }\r\n        }\r\n      }\r\n      \r\n      fatigue = Math.max(0, fatigue - totalRecovery);\r\n    }\r\n    \r\n    // Cap fatigue at configurable max fatigue\r\n    fatigue = Math.min(maxFatigue, fatigue);\r\n    \r\n    // Determine recovery status using configurable thresholds\r\n    let recoveryStatus: 'Ready' | 'Recovering' | 'Fatigued'; \r\n    if (fatigue < thresholds.low) {\r\n      recoveryStatus = 'Ready';\r\n    } else if (fatigue < thresholds.high) {\r\n      recoveryStatus = 'Recovering';\r\n    } else {\r\n      recoveryStatus = 'Fatigued';\r\n    }\r\n    \r\n    // Calculate suggested rest days using configurable recovery rate\r\n    const suggestedRestDays = Math.ceil(fatigue / recoveryRate);\r\n    \r\n    return {\r\n      muscleGroup: group,\r\n      fatigue: Math.round(fatigue),\r\n      lastTrainingDate: data.lastTrainingDate,\r\n      recoveryStatus,\r\n      suggestedRestDays\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Returns muscle groups that are ready for training\r\n * @param fatigueData Array of muscle fatigue data\r\n * @returns Array of muscle groups ready for training\r\n */\r\nexport function getMusclesReadyForTraining(fatigueData: MuscleFatigueData[]): string[] {\r\n  return fatigueData\r\n    .filter(data => data.recoveryStatus === 'Ready')\r\n    .map(data => data.muscleGroup);\r\n}\r\n\r\n/**\r\n * Returns muscle groups that need rest\r\n * @param fatigueData Array of muscle fatigue data\r\n * @returns Array of muscle groups that need rest\r\n */\r\nexport function getMusclesNeedingRest(fatigueData: MuscleFatigueData[]): string[] {\r\n  return fatigueData\r\n    .filter(data => data.recoveryStatus === 'Fatigued')\r\n    .map(data => data.muscleGroup);\r\n}\r\n\r\n/**\r\n * Calculates personalized recovery profiles for each muscle group\r\n * @param logs Complete workout history\r\n * @param settings Optional fatigue settings to override defaults\r\n * @returns Recovery profiles for each trained muscle group\r\n */\r\nexport function calculateRecoveryProfiles(\r\n  logs: WorkoutLogEntry[],\r\n  settings?: FatigueSettings\r\n): MuscleRecoveryProfile[] {\r\n  if (!logs || logs.length === 0) return [];\r\n\r\n  // Use provided settings or defaults\r\n  const recoveryRate = settings?.recoveryRate ?? DEFAULT_RECOVERY_RATE;\r\n\r\n  // Group logs by muscle group\r\n  const muscleGroupLogs: Record<string, WorkoutLogEntry[]> = {};\r\n  logs.forEach(log => {\r\n    if (!muscleGroupLogs[log.muscleGroup]) {\r\n      muscleGroupLogs[log.muscleGroup] = [];\r\n    }\r\n    muscleGroupLogs[log.muscleGroup].push(log);\r\n  });\r\n\r\n  // Calculate recovery profiles for each muscle group\r\n  return Object.entries(muscleGroupLogs).map(([muscleGroup, muscleGroupHistory]) => {\r\n    // Sort workout logs by date (newest first)\r\n    const sortedLogs = [...muscleGroupHistory].sort((a, b) => \r\n      new Date(b.date).getTime() - new Date(a.date).getTime()\r\n    );\r\n    \r\n    // Calculate average recovery days (time between workouts)\r\n    let totalDays = 0;\r\n    let countIntervals = 0;\r\n    \r\n    for (let i = 0; i < sortedLogs.length - 1; i++) {\r\n      const currDate = new Date(sortedLogs[i].date);\r\n      const nextDate = new Date(sortedLogs[i+1].date);\r\n      \r\n      // Calculate days between workouts\r\n      const days = Math.abs(Math.round((currDate.getTime() - nextDate.getTime()) / (1000 * 60 * 60 * 24)));\r\n      \r\n      // Only count reasonable intervals (not months apart)\r\n      if (days > 0 && days < 14) {\r\n        totalDays += days;\r\n        countIntervals++;\r\n      }\r\n    }\r\n    \r\n    const averageRecoveryDays = countIntervals > 0 ? totalDays / countIntervals : 0;\r\n    \r\n    // Calculate personalized recovery rate\r\n    // Base this on how quickly this person typically recovers from workouts\r\n    const personalizedRecoveryRate = averageRecoveryDays > 0 \r\n      ? Math.min(25, Math.max(10, 100 / averageRecoveryDays)) // Range: 10-25%\r\n      : recoveryRate; // Default if no data\r\n    \r\n    // Determine optimal training frequency\r\n    // This is the recommended days between workouts for this muscle group\r\n    const optimalTrainingFrequency = Math.max(1, Math.min(7, Math.round(100 / personalizedRecoveryRate)));\r\n    \r\n    return {\r\n      muscleGroup,\r\n      baseRecoveryRate: recoveryRate,\r\n      personalizedRecoveryRate: Math.round(personalizedRecoveryRate * 10) / 10,\r\n      optimalTrainingFrequency: optimalTrainingFrequency,\r\n      averageRecoveryDays: Math.round(averageRecoveryDays * 10) / 10,\r\n      lastWorkouts: sortedLogs.slice(0, 3) // Include last 3 workouts\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Generates insights about muscle fatigue and recovery patterns\r\n * @param fatigueData Current fatigue data\r\n * @param recoveryProfiles Recovery profiles\r\n * @returns Array of insights with recommendations\r\n */\r\nexport function generateFatigueInsights(\r\n  fatigueData: MuscleFatigueData[],\r\n  recoveryProfiles: MuscleRecoveryProfile[]\r\n): FatigueInsight[] {\r\n  const insights: FatigueInsight[] = [];\r\n  \r\n  // Match fatigue data with recovery profiles\r\n  fatigueData.forEach(data => {\r\n    const profile = recoveryProfiles.find(p => p.muscleGroup === data.muscleGroup);\r\n    if (!profile) return;\r\n    \r\n    // Generate insights based on fatigue level and recovery patterns\r\n    if (data.fatigue > 80) {\r\n      insights.push({\r\n        muscleGroup: data.muscleGroup,\r\n        insight: `Your ${data.muscleGroup} is highly fatigued and needs proper rest.`,\r\n        type: 'warning',\r\n        suggestion: `Rest for at least ${data.suggestedRestDays} days before training again.`\r\n      });\r\n    } else if (data.fatigue < 10 && profile.averageRecoveryDays > 5) {\r\n      insights.push({\r\n        muscleGroup: data.muscleGroup,\r\n        insight: `Your ${data.muscleGroup} is undertraining based on your recovery capacity.`,\r\n        type: 'info',\r\n        suggestion: `You could train this muscle group more frequently, approximately every ${profile.optimalTrainingFrequency} days.`\r\n      });\r\n    } else if (data.fatigue > 60 && profile.averageRecoveryDays < 2) {\r\n      insights.push({\r\n        muscleGroup: data.muscleGroup,\r\n        insight: `You appear to be training ${data.muscleGroup} too frequently.`,\r\n        type: 'warning',\r\n        suggestion: `Consider increasing rest between workouts to at least ${profile.optimalTrainingFrequency} days.`\r\n      });\r\n    } else if (data.recoveryStatus === 'Ready') {\r\n      insights.push({\r\n        muscleGroup: data.muscleGroup,\r\n        insight: `Your ${data.muscleGroup} has fully recovered and is ready for an effective workout.`,\r\n        type: 'positive',\r\n        suggestion: `For optimal growth, train with progressive overload and then allow ${profile.optimalTrainingFrequency} days for recovery.`\r\n      });\r\n    }\r\n  });\r\n  \r\n  return insights;\r\n}\r\n","// src/components/workout/WorkoutRecommender.tsx\r\nimport React, { useMemo, useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { calculateMuscleFatigue, getMusclesReadyForTraining } from '@/utils/muscleFatigueCalculator';\r\nimport { WorkoutLogEntry } from '@/types/Workout_Log';\r\nimport { useExercises, useWorkoutTemplates } from '@/hooks/useConsolidatedApp';\r\nimport { useFatigueSettings } from '@/contexts/FatigueSettingsContext';\r\nimport { useMetricConversion } from '@/hooks/useMetricConversion';\r\nimport { Lightbulb, Save, PlayCircle } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface WorkoutRecommenderProps {\r\n  logs: WorkoutLogEntry[];\r\n}\r\n\r\nexport const WorkoutRecommender: React.FC<WorkoutRecommenderProps> = ({ logs }) => {\r\n  const { exercises } = useExercises();\r\n  const { saveTemplate, startWorkout } = useWorkoutTemplates();\r\n  const { settings } = useFatigueSettings();\r\n  const { convertAndFormatWeight } = useMetricConversion();\r\n  \r\n  const [workoutType, setWorkoutType] = useState<'fullBody' | 'split' | 'push' | 'pull' | 'legs'>('fullBody');\r\n  const [duration, setDuration] = useState<'short' | 'medium' | 'long'>('medium');\r\n  const [isGenerating, setIsGenerating] = useState(false);  const [recommendedWorkout, setRecommendedWorkout] = useState<{\r\n    name: string;\r\n    description: string;\r\n    exercises: Array<{\r\n      name: string;\r\n      muscleGroup: string;\r\n      sets: number;\r\n      reps: number;\r\n      weight: number;\r\n    }>;\r\n  } | null>(null);\r\n  // Calculate which muscles are ready for training\r\n  const readyMuscles = useMemo(() => {\r\n    const fatigueData = calculateMuscleFatigue(logs, undefined, settings);\r\n    return getMusclesReadyForTraining(fatigueData);\r\n  }, [logs, settings]);\r\n\r\n  const getExercisesByMuscleGroups = (muscleGroups: string[], count: number) => {\r\n    // Filter exercises by the provided muscle groups\r\n    const filteredExercises = exercises.filter(ex => \r\n      muscleGroups.some(m => ex.muscleGroup.toLowerCase() === m.toLowerCase())\r\n    );\r\n    \r\n    // Use a map to ensure we don't get duplicate exercises\r\n    const selectedExercises = new Map();\r\n    \r\n    // Try to get at least one exercise per muscle group first\r\n    muscleGroups.forEach(muscleGroup => {\r\n      const muscleExercises = filteredExercises.filter(ex => \r\n        ex.muscleGroup.toLowerCase() === muscleGroup.toLowerCase()\r\n      );\r\n      \r\n      if (muscleExercises.length > 0) {\r\n        // Get a random exercise for this muscle group\r\n        const randomIndex = Math.floor(Math.random() * muscleExercises.length);\r\n        const exercise = muscleExercises[randomIndex];\r\n        selectedExercises.set(exercise.exercise, {\r\n          name: exercise.exercise,\r\n          muscleGroup: exercise.muscleGroup,\r\n          sets: getRecommendedSets(duration),\r\n          reps: getRecommendedReps(exercise.targetIntensity),\r\n          weight: 0 // This will be filled in by the user when they start the workout\r\n        });\r\n      }\r\n    });\r\n    \r\n    // If we haven't reached the desired count, add more exercises randomly\r\n    while (selectedExercises.size < count && filteredExercises.length > selectedExercises.size) {\r\n      const remainingExercises = filteredExercises.filter(ex => \r\n        !selectedExercises.has(ex.exercise)\r\n      );\r\n      \r\n      if (remainingExercises.length === 0) break;\r\n      \r\n      const randomIndex = Math.floor(Math.random() * remainingExercises.length);\r\n      const exercise = remainingExercises[randomIndex];\r\n      \r\n      selectedExercises.set(exercise.exercise, {\r\n        name: exercise.exercise,\r\n        muscleGroup: exercise.muscleGroup,\r\n        sets: getRecommendedSets(duration),\r\n        reps: getRecommendedReps(exercise.targetIntensity),\r\n        weight: 0\r\n      });\r\n    }\r\n    \r\n    return Array.from(selectedExercises.values());\r\n  };\r\n  \r\n  const getRecommendedSets = (duration: string) => {\r\n    switch (duration) {\r\n      case 'short': return 2;\r\n      case 'long': return 4;\r\n      default: return 3;\r\n    }\r\n  };\r\n  \r\n  const getRecommendedReps = (intensity: string | number) => {\r\n    // Convert intensity to number if it's a string\r\n    const intensityValue = typeof intensity === 'string' \r\n      ? parseInt(intensity) || 5 \r\n      : intensity;\r\n    \r\n    // Adjust reps based on intensity\r\n    if (intensityValue >= 8) return 6; // High intensity = lower reps\r\n    if (intensityValue <= 3) return 15; // Low intensity = higher reps\r\n    return 10; // Medium intensity = medium reps\r\n  };\r\n\r\n  const generateWorkout = () => {\r\n    setIsGenerating(true);\r\n    \r\n    // If no muscles are ready, show a message\r\n    if (readyMuscles.length === 0) {\r\n      toast.error(\"No muscles ready for training\", {\r\n        description: \"All your muscle groups need more recovery time.\"\r\n      });\r\n      setIsGenerating(false);\r\n      return;\r\n    }\r\n    \r\n    let targetMuscles: string[] = [];\r\n    let exerciseCount = 0;\r\n    let workoutName = '';\r\n    let workoutDescription = '';\r\n    \r\n    // Determine which muscles to target based on workout type\r\n    switch (workoutType) {\r\n      case 'fullBody':\r\n        targetMuscles = readyMuscles;\r\n        exerciseCount = duration === 'short' ? 4 : duration === 'medium' ? 6 : 8;\r\n        workoutName = 'Full Body Workout';\r\n        workoutDescription = 'A complete workout targeting all the ready muscle groups';\r\n        break;\r\n        \r\n      case 'push':\r\n        // Filter push muscles\r\n        targetMuscles = readyMuscles.filter(muscle => \r\n          ['chest', 'shoulders', 'triceps'].includes(muscle.toLowerCase())\r\n        );\r\n        exerciseCount = duration === 'short' ? 3 : duration === 'medium' ? 5 : 7;\r\n        workoutName = 'Push Workout';\r\n        workoutDescription = 'Chest, shoulders, and triceps focused workout';\r\n        break;\r\n        \r\n      case 'pull':\r\n        // Filter pull muscles\r\n        targetMuscles = readyMuscles.filter(muscle => \r\n          ['back', 'biceps', 'forearms'].includes(muscle.toLowerCase())\r\n        );\r\n        exerciseCount = duration === 'short' ? 3 : duration === 'medium' ? 5 : 7;\r\n        workoutName = 'Pull Workout';\r\n        workoutDescription = 'Back and biceps focused workout';\r\n        break;\r\n        \r\n      case 'legs':\r\n        // Filter leg muscles\r\n        targetMuscles = readyMuscles.filter(muscle => \r\n          ['quadriceps', 'hamstrings', 'calves', 'glutes'].includes(muscle.toLowerCase())\r\n        );\r\n        exerciseCount = duration === 'short' ? 3 : duration === 'medium' ? 5 : 7;\r\n        workoutName = 'Leg Workout';\r\n        workoutDescription = 'Lower body focused workout';\r\n        break;\r\n        \r\n      case 'split':\r\n        // Choose the muscle groups with the lowest fatigue\r\n        targetMuscles = readyMuscles.slice(0, 2);\r\n        exerciseCount = duration === 'short' ? 4 : duration === 'medium' ? 6 : 8;\r\n        workoutName = `${targetMuscles.join(' & ')} Workout`;\r\n        workoutDescription = `Focus workout targeting ${targetMuscles.join(' and ')}`;\r\n        break;\r\n    }\r\n    \r\n    // If no matching muscle groups are ready for the workout type\r\n    if (targetMuscles.length === 0) {\r\n      toast.error(`No muscles ready for ${workoutType} workout`, {\r\n        description: \"Try a different workout type or wait for recovery.\"\r\n      });\r\n      setIsGenerating(false);\r\n      return;\r\n    }\r\n    \r\n    // Generate the exercises for the workout\r\n    const workoutExercises = getExercisesByMuscleGroups(targetMuscles, exerciseCount);\r\n    \r\n    // Create the recommended workout\r\n    setRecommendedWorkout({\r\n      name: workoutName,\r\n      description: workoutDescription,\r\n      exercises: workoutExercises\r\n    });\r\n    \r\n    setIsGenerating(false);\r\n    \r\n    toast.success(\"Workout Plan Generated\", {\r\n      description: `Created a ${duration} ${workoutType} workout with ${workoutExercises.length} exercises`\r\n    });\r\n  };\r\n  const handleSaveTemplate = () => {\r\n    if (!recommendedWorkout) return;\r\n      // Create a new template with the recommended workout\r\n    saveTemplate({\r\n      id: uuidv4(),\r\n      name: recommendedWorkout.name,\r\n      description: recommendedWorkout.description,\r\n      exercises: recommendedWorkout.exercises.map(ex => ({\r\n        ...ex,\r\n        // Add the required fields for WorkoutExercise type\r\n        rest: 60, // Default rest time in seconds\r\n        notes: '',\r\n        difficultyLevel: 'medium',\r\n        equipmentRequired: '',\r\n        targetIntensity: '5',\r\n        primaryMuscleGroup: ex.muscleGroup,\r\n        secondaryMuscleGroup: '',\r\n        exerciseDuration: '',\r\n        recoveryTime: '',\r\n        exerciseType: 'strength',\r\n        caloriesBurned: '',\r\n        exerciseProgression: '',\r\n        injuryRiskLevel: 'low',\r\n        exerciseLink: '',\r\n        imageLink: '',\r\n        relativePath: ''      })),\r\n      createdAt: new Date().toISOString(),\r\n      lastUsed: ''\r\n    });\r\n    \r\n    toast.success(\"Workout Template Saved\", {\r\n      description: \"You can find it in your workout templates\"\r\n    });\r\n  };\r\n    const handleStartWorkout = () => {\r\n    if (!recommendedWorkout) return;\r\n    \r\n    // First save it as a template\r\n    const templateName = recommendedWorkout.name;\r\n      saveTemplate({\r\n      id: uuidv4(),\r\n      name: templateName,\r\n      description: recommendedWorkout.description,\r\n      exercises: recommendedWorkout.exercises.map(ex => ({\r\n        ...ex,\r\n        // Add the required fields for WorkoutExercise type\r\n        rest: 60, // Default rest time in seconds\r\n        notes: '',\r\n        difficultyLevel: 'medium',\r\n        equipmentRequired: '',\r\n        targetIntensity: '5',\r\n        primaryMuscleGroup: ex.muscleGroup,\r\n        secondaryMuscleGroup: '',\r\n        exerciseDuration: '',\r\n        recoveryTime: '',\r\n        exerciseType: 'strength',\r\n        caloriesBurned: '',\r\n        exerciseProgression: '',\r\n        injuryRiskLevel: 'low',\r\n        exerciseLink: '',\r\n        imageLink: '',\r\n        relativePath: ''\r\n      })),\r\n      createdAt: new Date().toISOString(),\r\n      lastUsed: ''\r\n    });\r\n    \r\n    // Then start the workout with the template name\r\n    startWorkout(templateName);\r\n    \r\n    toast.success(\"Workout Started\", {\r\n      description: \"Let's get training!\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-lg font-semibold flex items-center\">\r\n          <Lightbulb className=\"h-5 w-5 mr-2 text-primary\" />\r\n          Workout Recommender\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Get personalized workout recommendations based on your recovery status\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid gap-4\">\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Workout Type</label>              <Select \r\n                value={workoutType} \r\n                onValueChange={(value: string) => setWorkoutType(value as 'fullBody' | 'split' | 'push' | 'pull' | 'legs')}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select workout type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"fullBody\">Full Body</SelectItem>\r\n                  <SelectItem value=\"push\">Push (Chest/Shoulders/Triceps)</SelectItem>\r\n                  <SelectItem value=\"pull\">Pull (Back/Biceps)</SelectItem>\r\n                  <SelectItem value=\"legs\">Legs</SelectItem>\r\n                  <SelectItem value=\"split\">Muscle Split</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            \r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Duration</label>              <Select \r\n                value={duration} \r\n                onValueChange={(value: string) => setDuration(value as 'short' | 'medium' | 'long')}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select duration\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"short\">Short (15-30 min)</SelectItem>\r\n                  <SelectItem value=\"medium\">Medium (30-45 min)</SelectItem>\r\n                  <SelectItem value=\"long\">Long (45-60+ min)</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          \r\n          <Button onClick={generateWorkout} disabled={isGenerating}>\r\n            {isGenerating ? 'Generating...' : 'Generate Workout'}\r\n          </Button>\r\n          \r\n          {recommendedWorkout && (\r\n            <div className=\"mt-6 space-y-4\">\r\n              <div className=\"p-4 bg-muted/30 rounded-md\">\r\n                <h3 className=\"font-medium mb-2\">{recommendedWorkout.name}</h3>\r\n                <p className=\"text-sm text-muted-foreground mb-4\">{recommendedWorkout.description}</p>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  {recommendedWorkout.exercises.map((exercise, index) => (\r\n                    <div key={index} className=\"flex justify-between items-center text-sm\">\r\n                      <div>\r\n                        <span className=\"font-medium\">{exercise.name}</span>\r\n                        <span className=\"text-muted-foreground ml-2\">({exercise.muscleGroup})</span>\r\n                      </div>\r\n                      <div className=\"text-muted-foreground\">\r\n                        {exercise.sets} sets × {exercise.reps} reps\r\n                        {exercise.weight > 0 && ` @ ${convertAndFormatWeight(exercise.weight)}`}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter className=\"flex justify-between\">\r\n        <Button\r\n          variant=\"outline\"\r\n          onClick={generateWorkout}\r\n          disabled={isGenerating}\r\n        >\r\n          {isGenerating ? 'Generating...' : 'Generate Workout'}\r\n        </Button>\r\n        \r\n        {recommendedWorkout && (\r\n          <div className=\"space-x-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleSaveTemplate}\r\n            >\r\n              <Save className=\"h-4 w-4 mr-2\" />\r\n              Save Template\r\n            </Button>\r\n            <Button\r\n              onClick={handleStartWorkout}\r\n            >\r\n              <PlayCircle className=\"h-4 w-4 mr-2\" />\r\n              Start Workout\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n","// src/components/workout/MuscleFatigueAnalytics.tsx\r\nimport React, { useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { WorkoutLogEntry } from '@/types/Workout_Log';\r\nimport { calculateMuscleFatigue } from '@/utils/muscleFatigueCalculator';\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend } from 'recharts';\r\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { TrendingUp, Calendar, Info } from 'lucide-react';\r\nimport { useFatigueSettings } from '@/contexts/FatigueSettingsContext';\r\nimport { useMetricConversion } from '@/hooks/useMetricConversion';\r\n\r\ninterface MuscleFatigueAnalyticsProps {\r\n  logs: WorkoutLogEntry[];\r\n}\r\n\r\nexport const MuscleFatigueAnalytics: React.FC<MuscleFatigueAnalyticsProps> = ({ logs }) => {\r\n  const { settings } = useFatigueSettings();\r\n  const { convertAndFormatWeight } = useMetricConversion();\r\n  \r\n  // Calculate current muscle fatigue levels\r\n  const currentFatigue = useMemo(() => {\r\n    return calculateMuscleFatigue(logs, undefined, settings);\r\n  }, [logs, settings]);\r\n  \r\n  // Group logs by date for time-based analysis\r\n  const logsByDate = useMemo(() => {\r\n    const grouped = new Map<string, WorkoutLogEntry[]>();\r\n    \r\n    // Sort logs by date (newest first)\r\n    const sortedLogs = [...logs].sort((a, b) => \r\n      new Date(b.date).getTime() - new Date(a.date).getTime()\r\n    );\r\n    \r\n    // Group logs by date\r\n    sortedLogs.forEach(log => {\r\n      const date = new Date(log.date).toLocaleDateString();\r\n      if (!grouped.has(date)) {\r\n        grouped.set(date, []);\r\n      }\r\n      grouped.get(date)?.push(log);\r\n    });\r\n    \r\n    return grouped;\r\n  }, [logs]);\r\n  \r\n  // Calculate muscle fatigue over time (last 14 days)\r\n  const fatigueOverTime = useMemo(() => {\r\n    const result = [];\r\n    const today = new Date();\r\n    \r\n    // Create data for the last 14 days\r\n    for (let i = 13; i >= 0; i--) {\r\n      const date = new Date(today);\r\n      date.setDate(date.getDate() - i);\r\n      const dateStr = date.toLocaleDateString();\r\n      \r\n      // Filter logs before or on this date\r\n      const logsBeforeDate = logs.filter(log => \r\n        new Date(log.date) <= date\r\n      );\r\n        // Calculate fatigue for this date\r\n      const fatigue = calculateMuscleFatigue(logsBeforeDate, undefined, settings);\r\n      \r\n      // Average fatigue by muscle group\r\n      const muscleGroups = new Map<string, number>();\r\n      fatigue.forEach(f => {\r\n        muscleGroups.set(f.muscleGroup, f.fatigue);\r\n      });\r\n      \r\n      // Create data point\r\n      result.push({\r\n        date: dateStr,\r\n        ...Object.fromEntries(muscleGroups.entries())\r\n      });\r\n    }\r\n      return result;\r\n  }, [logs, settings]);\r\n  \r\n  // Get primary muscle groups\r\n  const primaryMuscleGroups = useMemo(() => {\r\n    const groups = new Set<string>();\r\n    currentFatigue.forEach(f => groups.add(f.muscleGroup));\r\n    return Array.from(groups);\r\n  }, [currentFatigue]);\r\n  \r\n  // Get training frequency by muscle group\r\n  const trainingFrequency = useMemo(() => {\r\n    const frequency: Record<string, number> = {};\r\n    \r\n    logs.forEach(log => {\r\n      const muscleGroup = log.muscleGroup;\r\n      if (!frequency[muscleGroup]) {\r\n        frequency[muscleGroup] = 0;\r\n      }\r\n      frequency[muscleGroup]++;\r\n    });\r\n    \r\n    return Object.entries(frequency)\r\n      .map(([muscleGroup, count]) => ({ muscleGroup, count }))\r\n      .sort((a, b) => b.count - a.count);\r\n  }, [logs]);\r\n  \r\n  // Calculate optimal training frequency by muscle group\r\n  const optimalTrainingFrequency = useMemo(() => {\r\n    return primaryMuscleGroups.map(muscleGroup => {\r\n      // Get fatigue level for this muscle group\r\n      const fatigue = currentFatigue.find(f => f.muscleGroup === muscleGroup)?.fatigue || 0;\r\n      \r\n      // Calculate optimal training frequency (days between workouts)\r\n      // This is an estimation based on fatigue level:\r\n      // - Low fatigue muscles (0-20): can train every 1-2 days\r\n      // - Medium fatigue muscles (20-60): train every 2-3 days\r\n      // - High fatigue muscles (60-100): train every 3-5 days\r\n      let daysPerWorkout = 1;\r\n      if (fatigue < 20) {\r\n        daysPerWorkout = 1;\r\n      } else if (fatigue < 60) {\r\n        daysPerWorkout = 2;\r\n      } else {\r\n        daysPerWorkout = 3;\r\n      }\r\n      \r\n      return {\r\n        muscleGroup,\r\n        daysPerWorkout,\r\n        workoutsPerWeek: Math.round(7 / daysPerWorkout),\r\n        currentFatigue: fatigue\r\n      };\r\n    });\r\n  }, [primaryMuscleGroups, currentFatigue]);\r\n  \r\n  // Calculate recovery patterns\r\n  const recoveryPatterns = useMemo(() => {\r\n    const patterns: Record<string, { avgRecoveryDays: number; lastTrainingDate: string | null }> = {};\r\n    \r\n    // Go through each unique muscle group\r\n    primaryMuscleGroups.forEach(muscleGroup => {\r\n      // Filter logs for this muscle group\r\n      const muscleGroupLogs = logs.filter(log => log.muscleGroup === muscleGroup);\r\n      \r\n      // Sort logs by date (oldest first)\r\n      const sortedLogs = [...muscleGroupLogs].sort((a, b) => \r\n        new Date(a.date).getTime() - new Date(b.date).getTime()\r\n      );\r\n      \r\n      // Calculate days between workouts\r\n      let totalDays = 0;\r\n      let countIntervals = 0;\r\n      \r\n      for (let i = 1; i < sortedLogs.length; i++) {\r\n        const prevDate = new Date(sortedLogs[i-1].date);\r\n        const currDate = new Date(sortedLogs[i].date);\r\n        \r\n        // Calculate days between workouts\r\n        const days = Math.round((currDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));\r\n        \r\n        // Only count if it's a reasonable interval (not months)\r\n        if (days > 0 && days < 14) {\r\n          totalDays += days;\r\n          countIntervals++;\r\n        }\r\n      }\r\n      \r\n      patterns[muscleGroup] = {\r\n        avgRecoveryDays: countIntervals > 0 ? Math.round(totalDays / countIntervals * 10) / 10 : 0,\r\n        lastTrainingDate: sortedLogs.length > 0 ? sortedLogs[sortedLogs.length - 1].date : null\r\n      };\r\n    });\r\n    \r\n    return patterns;\r\n  }, [logs, primaryMuscleGroups]);\r\n  \r\n  if (!logs || logs.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg font-semibold flex items-center\">\r\n            <TrendingUp className=\"h-5 w-5 mr-2 text-primary\" />\r\n            Muscle Fatigue Analytics\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Log workouts to see analytics and insights about your muscle recovery patterns\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center h-60\">\r\n          <p className=\"text-muted-foreground\">No workout data available</p>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-lg font-semibold flex items-center\">\r\n          <TrendingUp className=\"h-5 w-5 mr-2 text-primary\" />\r\n          Muscle Fatigue Analytics\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Insights and patterns about your muscle recovery and training frequency\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs defaultValue=\"overview\">\r\n          <TabsList className=\"grid grid-cols-3 mb-4\">\r\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n            <TabsTrigger value=\"frequency\">Training Frequency</TabsTrigger>\r\n            <TabsTrigger value=\"recovery\">Recovery Patterns</TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"overview\">\r\n            <div className=\"space-y-4\">\r\n              <h3 className=\"text-sm font-medium\">Current Muscle Fatigue Levels</h3>\r\n              \r\n              <div className=\"h-64 w-full\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <BarChart\r\n                    data={currentFatigue.sort((a, b) => b.fatigue - a.fatigue)}\r\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n                  >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} />\r\n                    <XAxis \r\n                      dataKey=\"muscleGroup\" \r\n                      fontSize={12} \r\n                      angle={-45} \r\n                      textAnchor=\"end\" \r\n                      height={60} \r\n                    />\r\n                    <YAxis \r\n                      label={{ value: 'Fatigue %', angle: -90, position: 'insideLeft' }} \r\n                      domain={[0, 100]} \r\n                    />\r\n                    <Tooltip />\r\n                    <Bar \r\n                      dataKey=\"fatigue\" \r\n                      name=\"Fatigue Level\" \r\n                      fill=\"var(--primary)\" \r\n                      radius={[4, 4, 0, 0]} \r\n                    />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n              \r\n              <Separator className=\"my-4\" />\r\n              \r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Recent Workout Activity</h3>\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                  {Array.from(logsByDate.entries()).slice(0, 4).map(([date, dayLogs]) => (\r\n                    <div key={date} className=\"p-3 bg-muted/30 rounded-md\">\r\n                      <div className=\"flex items-center mb-2\">\r\n                        <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />\r\n                        <span className=\"text-sm font-medium\">{date}</span>\r\n                      </div>\r\n                      <div className=\"space-y-1\">\r\n                        {dayLogs.map((log, index) => (\r\n                          <div key={index} className=\"text-sm\">\r\n                            <span className=\"font-medium\">{log.exercise}</span>\r\n                            <span className=\"text-muted-foreground\">\r\n                              {' '}- {log.sets} sets × {log.reps} reps\r\n                              {log.weight && ` @ ${convertAndFormatWeight(log.weight)}`}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"frequency\">\r\n            <div className=\"space-y-4\">\r\n              <div className=\"h-64 w-full\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <BarChart\r\n                    data={trainingFrequency}\r\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n                  >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} />\r\n                    <XAxis \r\n                      dataKey=\"muscleGroup\" \r\n                      fontSize={12} \r\n                      angle={-45} \r\n                      textAnchor=\"end\" \r\n                      height={60} \r\n                    />\r\n                    <YAxis \r\n                      label={{ value: 'Workout Count', angle: -90, position: 'insideLeft' }} \r\n                    />\r\n                    <Tooltip />\r\n                    <Bar \r\n                      dataKey=\"count\" \r\n                      name=\"Training Sessions\" \r\n                      fill=\"var(--primary)\" \r\n                      radius={[4, 4, 0, 0]} \r\n                    />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n              \r\n              <Separator className=\"my-4\" />\r\n              \r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2 flex items-center gap-1\">\r\n                  Optimal Training Frequency\r\n                  <Info className=\"h-4 w-4 text-muted-foreground\" />\r\n                </h3>\r\n                <p className=\"text-xs text-muted-foreground mb-3\">\r\n                  Based on your recovery patterns and current fatigue levels\r\n                </p>\r\n                \r\n                <div className=\"overflow-x-auto\">\r\n                  <table className=\"w-full border-collapse\">\r\n                    <thead>\r\n                      <tr className=\"border-b\">\r\n                        <th className=\"text-left p-2 text-xs font-medium\">Muscle Group</th>\r\n                        <th className=\"text-center p-2 text-xs font-medium\">Current Fatigue</th>\r\n                        <th className=\"text-center p-2 text-xs font-medium\">Optimal Days Between</th>\r\n                        <th className=\"text-center p-2 text-xs font-medium\">Workouts Per Week</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {optimalTrainingFrequency.map((item, idx) => (\r\n                        <tr key={idx} className={idx % 2 === 0 ? 'bg-muted/20' : ''}>\r\n                          <td className=\"p-2 text-xs\">{item.muscleGroup}</td>\r\n                          <td className=\"p-2 text-xs text-center\">{item.currentFatigue}%</td>\r\n                          <td className=\"p-2 text-xs text-center\">{item.daysPerWorkout}</td>\r\n                          <td className=\"p-2 text-xs text-center\">{item.workoutsPerWeek}</td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"recovery\">\r\n            <div className=\"space-y-4\">\r\n              <h3 className=\"text-sm font-medium\">Muscle Recovery Patterns</h3>\r\n              \r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"w-full border-collapse\">\r\n                  <thead>\r\n                    <tr className=\"border-b\">\r\n                      <th className=\"text-left p-2 text-xs font-medium\">Muscle Group</th>\r\n                      <th className=\"text-center p-2 text-xs font-medium\">Avg. Days Between Workouts</th>\r\n                      <th className=\"text-center p-2 text-xs font-medium\">Last Trained</th>\r\n                      <th className=\"text-center p-2 text-xs font-medium\">Current Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {primaryMuscleGroups.map((muscle, idx) => {\r\n                      const pattern = recoveryPatterns[muscle];\r\n                      const fatigue = currentFatigue.find(f => f.muscleGroup === muscle);\r\n                      \r\n                      return (\r\n                        <tr key={idx} className={idx % 2 === 0 ? 'bg-muted/20' : ''}>\r\n                          <td className=\"p-2 text-xs\">{muscle}</td>\r\n                          <td className=\"p-2 text-xs text-center\">\r\n                            {pattern?.avgRecoveryDays || 'N/A'}\r\n                          </td>\r\n                          <td className=\"p-2 text-xs text-center\">\r\n                            {pattern?.lastTrainingDate \r\n                              ? new Date(pattern.lastTrainingDate).toLocaleDateString() \r\n                              : 'Never'}\r\n                          </td>\r\n                          <td className=\"p-2 text-xs text-center\">\r\n                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\r\n                              ${fatigue?.recoveryStatus === 'Ready' \r\n                                ? 'bg-green-500/10 text-green-500' \r\n                                : fatigue?.recoveryStatus === 'Recovering' \r\n                                  ? 'bg-yellow-500/10 text-yellow-500' \r\n                                  : 'bg-red-500/10 text-red-500'}`}>\r\n                              {fatigue?.recoveryStatus || 'Unknown'}\r\n                            </span>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              \r\n              <Separator className=\"my-4\" />\r\n              \r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-3\">Recovery Insights</h3>\r\n                <div className=\"grid gap-2\">\r\n                  {primaryMuscleGroups.map((muscle, idx) => {\r\n                    const fatigue = currentFatigue.find(f => f.muscleGroup === muscle);\r\n                    const pattern = recoveryPatterns[muscle];\r\n                    \r\n                    // Skip if we don't have enough data\r\n                    if (!fatigue || !pattern || pattern.avgRecoveryDays === 0) return null;\r\n                    \r\n                    let insight = '';\r\n                    let insightType: 'positive' | 'warning' | 'info' = 'info';\r\n                    \r\n                    if (fatigue.fatigue > 70) {\r\n                      insight = `Your ${muscle} is highly fatigued. Consider resting for at least ${fatigue.suggestedRestDays} more days.`;\r\n                      insightType = 'warning';\r\n                    } else if (pattern.avgRecoveryDays < 2 && fatigue.fatigue > 40) {\r\n                      insight = `You may be training ${muscle} too frequently. Consider increasing rest between workouts.`;\r\n                      insightType = 'warning';\r\n                    } else if (pattern.avgRecoveryDays > 5 && fatigue.fatigue < 20) {\r\n                      insight = `You could train ${muscle} more frequently to optimize gains.`;\r\n                      insightType = 'info';\r\n                    } else if (fatigue.recoveryStatus === 'Ready') {\r\n                      insight = `Your ${muscle} has recovered well and is ready for an effective training session.`;\r\n                      insightType = 'positive';\r\n                    }\r\n                    \r\n                    if (!insight) return null;\r\n                    \r\n                    return (\r\n                      <div \r\n                        key={idx} \r\n                        className={`p-3 rounded-md text-xs\r\n                          ${insightType === 'positive' ? 'bg-green-500/10' : \r\n                            insightType === 'warning' ? 'bg-red-500/10' : \r\n                            'bg-blue-500/10'}`}\r\n                      >\r\n                        {insight}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","// src/components/workout/AllFatigueInsights.tsx\r\nimport React, { useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { \r\n  calculateMuscleFatigue, \r\n  calculateRecoveryProfiles, \r\n  generateFatigueInsights,\r\n  FatigueInsight\r\n} from '@/utils/muscleFatigueCalculator';\r\nimport { WorkoutLogEntry } from '@/types/Workout_Log';\r\nimport { AlertCircle, CheckCircle, Info } from 'lucide-react';\r\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\r\nimport { useFatigueSettings } from '@/contexts/FatigueSettingsContext';\r\n\r\ninterface AllFatigueInsightsProps {\r\n  logs: WorkoutLogEntry[];\r\n}\r\n\r\nexport const AllFatigueInsights: React.FC<AllFatigueInsightsProps> = ({ logs }) => {\r\n  const { settings } = useFatigueSettings();\r\n  \r\n  // Generate all insights from workout logs\r\n  const { allInsights, warningInsights, positiveInsights, infoInsights } = useMemo(() => {\r\n    if (!logs || logs.length === 0) {\r\n      return { \r\n        allInsights: [], \r\n        warningInsights: [], \r\n        positiveInsights: [], \r\n        infoInsights: [] \r\n      };\r\n    }\r\n    \r\n    const fatigueData = calculateMuscleFatigue(logs, undefined, settings);\r\n    const recoveryProfiles = calculateRecoveryProfiles(logs, settings);\r\n    const insights = generateFatigueInsights(fatigueData, recoveryProfiles);\r\n      return {\r\n      allInsights: insights,\r\n      warningInsights: insights.filter(insight => insight.type === 'warning'),\r\n      positiveInsights: insights.filter(insight => insight.type === 'positive'),\r\n      infoInsights: insights.filter(insight => insight.type === 'info')\r\n    };\r\n  }, [logs, settings]);\r\n  \r\n  if (!logs || logs.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg font-semibold\">Recovery Insights</CardTitle>\r\n          <CardDescription>\r\n            Log workouts to receive personalized recovery insights\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center h-60\">\r\n          <p className=\"text-muted-foreground\">No workout data available</p>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  if (allInsights.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg font-semibold\">Recovery Insights</CardTitle>\r\n          <CardDescription>\r\n            Log more workouts to generate personalized insights\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center h-60\">\r\n          <p className=\"text-muted-foreground\">Not enough data for insights yet</p>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-lg font-semibold\">Recovery Insights</CardTitle>\r\n        <CardDescription>\r\n          Personalized insights to optimize your training and recovery cycle\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs defaultValue=\"all\">\r\n          <TabsList className=\"grid grid-cols-4 mb-4\">\r\n            <TabsTrigger value=\"all\" className=\"relative\">\r\n              All\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"warnings\" className=\"relative\">\r\n              Warnings\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"positive\" className=\"relative\">\r\n              Positive\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"tips\" className=\"relative\">\r\n              Tips\r\n            </TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"all\" className=\"space-y-4\">\r\n            {allInsights.length === 0 ? (\r\n              <p className=\"text-center text-muted-foreground py-8\">No insights available</p>\r\n            ) : (\r\n              <InsightsList insights={allInsights} />\r\n            )}\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"warnings\" className=\"space-y-4\">\r\n            {warningInsights.length === 0 ? (\r\n              <p className=\"text-center text-muted-foreground py-8\">No warnings - your training seems well balanced!</p>\r\n            ) : (\r\n              <InsightsList insights={warningInsights} />\r\n            )}\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"positive\" className=\"space-y-4\">\r\n            {positiveInsights.length === 0 ? (\r\n              <p className=\"text-center text-muted-foreground py-8\">No positive insights yet - keep training!</p>\r\n            ) : (\r\n              <InsightsList insights={positiveInsights} />\r\n            )}\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"tips\" className=\"space-y-4\">\r\n            {infoInsights.length === 0 ? (\r\n              <p className=\"text-center text-muted-foreground py-8\">No training tips available yet</p>\r\n            ) : (\r\n              <InsightsList insights={infoInsights} />\r\n            )}\r\n          </TabsContent>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Helper component to display a list of insights\r\nconst InsightsList: React.FC<{ insights: FatigueInsight[] }> = ({ insights }) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {insights.map((insight, idx) => (\r\n        <div \r\n          key={idx} \r\n          className={`p-4 rounded-lg border\r\n            ${insight.type === 'warning' ? 'bg-red-500/5 border-red-500/20' : \r\n              insight.type === 'positive' ? 'bg-green-500/5 border-green-500/20' : \r\n              'bg-blue-500/5 border-blue-500/20'}`}\r\n        >\r\n          <div className=\"flex gap-3\">\r\n            <div className=\"mt-1\">\r\n              {insight.type === 'warning' ? (\r\n                <AlertCircle className=\"h-5 w-5 text-red-500\" />\r\n              ) : insight.type === 'positive' ? (\r\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\r\n              ) : (\r\n                <Info className=\"h-5 w-5 text-blue-500\" />\r\n              )}\r\n            </div>\r\n            \r\n            <div>\r\n              <h4 className=\"text-base font-semibold mb-1\">{insight.muscleGroup}</h4>\r\n              <p className=\"text-sm mb-2\">{insight.insight}</p>\r\n              <p className={`text-sm font-medium\r\n                ${insight.type === 'warning' ? 'text-red-500' : \r\n                  insight.type === 'positive' ? 'text-green-500' : \r\n                  'text-blue-500'}`}>\r\n                {insight.suggestion}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","// src/views/MuscleFatiguePage.tsx\r\nimport React, { useMemo } from 'react';\r\nimport { ArrowLeft, Calendar, Activity, Check, AlertTriangle, Clock } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\r\nimport { calculateMuscleFatigue, MuscleFatigueData } from '@/utils/muscleFatigueCalculator';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { useWorkoutLogs, useExercises, useConsolidatedApp } from '@/hooks/useConsolidatedApp';\r\nimport { WorkoutRecommender } from '@/components/workout/WorkoutRecommender';\r\nimport { MuscleFatigueAnalytics } from '@/components/workout/MuscleFatigueAnalytics';\r\nimport { AllFatigueInsights } from '@/components/workout/AllFatigueInsights';\r\nimport { useFatigueSettings } from '@/contexts/FatigueSettingsContext';\r\nimport { DashboardLayout } from '@/components/DashboardLayout';\r\n\r\nconst MuscleFatigueContent: React.FC = () => {\r\n  const { appStore } = useConsolidatedApp();\r\n  const { setCurrentView } = appStore;\r\n  const { workoutLogs } = useWorkoutLogs();\r\n  const { getExercisesByMuscleGroup } = useExercises();\r\n  const { settings } = useFatigueSettings();\r\n  \r\n  // Calculate muscle fatigue data\r\n  const fatigueData = useMemo(() => {\r\n    return calculateMuscleFatigue(workoutLogs, undefined, settings);\r\n  }, [workoutLogs, settings]);\r\n\r\n  // Group muscles by recovery status\r\n  const groupedMuscles = useMemo(() => {\r\n    const grouped = {\r\n      ready: fatigueData.filter(data => data.recoveryStatus === 'Ready'),\r\n      recovering: fatigueData.filter(data => data.recoveryStatus === 'Recovering'),\r\n      fatigued: fatigueData.filter(data => data.recoveryStatus === 'Fatigued')\r\n    };\r\n    \r\n    // Sort each group by fatigue level\r\n    return {\r\n      ready: grouped.ready.sort((a, b) => a.fatigue - b.fatigue),\r\n      recovering: grouped.recovering.sort((a, b) => a.fatigue - b.fatigue),\r\n      fatigued: grouped.fatigued.sort((a, b) => b.fatigue - a.fatigue)\r\n    };\r\n  }, [fatigueData]);\r\n  // Check if there's no workout log data\r\n  if (!workoutLogs || workoutLogs.length === 0) {\r\n    return (\r\n      <div className=\"container max-w-3xl mx-auto py-4 px-4\">\r\n        <div className=\"flex items-center mb-4\">\r\n          <Button variant=\"outline\" size=\"icon\" onClick={() => setCurrentView('dashboard')} className=\"mr-2\">\r\n            <ArrowLeft className=\"h-4 w-4\" />\r\n          </Button>\r\n          <h1 className=\"text-2xl font-bold\">Muscle Fatigue Tracker</h1>\r\n        </div>\r\n        \r\n        <Card>\r\n          <CardContent className=\"flex flex-col items-center justify-center h-60 text-center\">\r\n            <Activity className=\"h-16 w-16 text-muted-foreground mb-4\" />\r\n            <p className=\"text-xl font-medium mb-2\">No workout data available</p>\r\n            <p className=\"text-muted-foreground mb-4\">Log your workouts to track muscle fatigue and recovery status</p>\r\n            <Button onClick={() => setCurrentView('workouts')}>\r\n              Log a Workout\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container max-w-3xl mx-auto py-4 px-4\">\r\n      <div className=\"flex items-center mb-4\">\r\n        <Button variant=\"outline\" size=\"icon\" onClick={() => setCurrentView('dashboard')} className=\"mr-2\">\r\n          <ArrowLeft className=\"h-4 w-4\" />\r\n        </Button>\r\n        <h1 className=\"text-2xl font-bold\">Muscle Fatigue Tracker</h1>\r\n      </div>\r\n\r\n      <div className=\"grid gap-4 mb-4\">\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle>Recovery Status</CardTitle>\r\n            <CardDescription>Train muscles that are ready, avoid those that need rest</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-3 gap-2 text-center\">\r\n              <div className=\"p-2 bg-green-500/10 rounded-md\">\r\n                <Check className=\"h-5 w-5 text-green-500 mx-auto mb-1\" />\r\n                <p className=\"font-medium\">{groupedMuscles.ready.length}</p>\r\n                <p className=\"text-xs text-muted-foreground\">Ready to Train</p>\r\n              </div>\r\n              <div className=\"p-2 bg-yellow-500/10 rounded-md\">\r\n                <Clock className=\"h-5 w-5 text-yellow-500 mx-auto mb-1\" />\r\n                <p className=\"font-medium\">{groupedMuscles.recovering.length}</p>\r\n                <p className=\"text-xs text-muted-foreground\">Recovering</p>\r\n              </div>\r\n              <div className=\"p-2 bg-red-500/10 rounded-md\">\r\n                <AlertTriangle className=\"h-5 w-5 text-red-500 mx-auto mb-1\" />\r\n                <p className=\"font-medium\">{groupedMuscles.fatigued.length}</p>\r\n                <p className=\"text-xs text-muted-foreground\">Needs Rest</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Tabs defaultValue=\"ready\">\r\n          <TabsList className=\"grid grid-cols-3 mb-2\">\r\n            <TabsTrigger value=\"ready\">Ready to Train</TabsTrigger>\r\n            <TabsTrigger value=\"recovering\">Recovering</TabsTrigger>\r\n            <TabsTrigger value=\"fatigued\">Needs Rest</TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"ready\">\r\n            <Card>\r\n              <CardContent className=\"pt-6\">\r\n                {groupedMuscles.ready.length === 0 ? (\r\n                  <p className=\"text-center py-8 text-muted-foreground\">No muscle groups are ready for training</p>\r\n                ) : (\r\n                  <div className=\"grid gap-4\">\r\n                    {groupedMuscles.ready.map(muscle => (\r\n                      <MuscleDetails \r\n                        key={muscle.muscleGroup} \r\n                        muscle={muscle} \r\n                        getExercises={getExercisesByMuscleGroup}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"recovering\">\r\n            <Card>\r\n              <CardContent className=\"pt-6\">\r\n                {groupedMuscles.recovering.length === 0 ? (\r\n                  <p className=\"text-center py-8 text-muted-foreground\">No muscle groups are recovering</p>\r\n                ) : (\r\n                  <div className=\"grid gap-4\">\r\n                    {groupedMuscles.recovering.map(muscle => (\r\n                      <MuscleDetails \r\n                        key={muscle.muscleGroup} \r\n                        muscle={muscle} \r\n                        getExercises={getExercisesByMuscleGroup}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"fatigued\">\r\n            <Card>\r\n              <CardContent className=\"pt-6\">\r\n                {groupedMuscles.fatigued.length === 0 ? (\r\n                  <p className=\"text-center py-8 text-muted-foreground\">No muscle groups need rest</p>\r\n                ) : (\r\n                  <div className=\"grid gap-4\">\r\n                    {groupedMuscles.fatigued.map(muscle => (\r\n                      <MuscleDetails \r\n                        key={muscle.muscleGroup} \r\n                        muscle={muscle} \r\n                        getExercises={getExercisesByMuscleGroup}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n        {/* Add the WorkoutRecommender component */}\r\n      <div className=\"mt-6 grid gap-6\">\r\n        <WorkoutRecommender logs={workoutLogs} />\r\n        \r\n        <AllFatigueInsights logs={workoutLogs} />\r\n        \r\n        {/* Add the MuscleFatigueAnalytics component */}\r\n        <MuscleFatigueAnalytics logs={workoutLogs} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Component for muscle details\r\ninterface MuscleDetailsProps {\r\n  muscle: MuscleFatigueData;\r\n  getExercises: (muscleGroup: string) => string[];\r\n}\r\n\r\nconst MuscleDetails: React.FC<MuscleDetailsProps> = ({ muscle, getExercises }) => {\r\n  // Convert the string array to the required format\r\n  const exercises = getExercises(muscle.muscleGroup)\r\n    .slice(0, 5) // Show top 5 exercises\r\n    .map(exerciseName => ({ \r\n      exercise: exerciseName, \r\n      muscleGroup: muscle.muscleGroup \r\n    }));\r\n\r\n  const getFatigueColor = (fatigue: number) => {\r\n    if (fatigue < 20) return 'bg-green-500';\r\n    if (fatigue < 60) return 'bg-yellow-500';\r\n    return 'bg-red-500';\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    if (status === 'Ready') return 'text-green-500';\r\n    if (status === 'Recovering') return 'text-yellow-500';\r\n    return 'text-red-500';\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    if (status === 'Ready') return <Check className=\"h-4 w-4 text-green-500\" />;\r\n    if (status === 'Recovering') return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n    return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\r\n  };\r\n\r\n  return (\r\n    <div className=\"border rounded-lg overflow-hidden\">\r\n      <div className=\"p-4\">\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          <h3 className=\"text-lg font-medium\">{muscle.muscleGroup}</h3>\r\n          <div className={`flex items-center ${getStatusColor(muscle.recoveryStatus)}`}>\r\n            {getStatusIcon(muscle.recoveryStatus)}\r\n            <span className=\"ml-1 text-sm\">{muscle.recoveryStatus}</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mb-3\">\r\n          <div className=\"flex justify-between text-sm mb-1\">\r\n            <span>Fatigue Level</span>\r\n            <span className=\"font-medium\">{muscle.fatigue}%</span>\r\n          </div>\r\n          <Progress value={muscle.fatigue} className={`h-2 ${getFatigueColor(muscle.fatigue)}`} />\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-2 gap-2 text-sm mb-4\">\r\n          <div className=\"flex items-center\">\r\n            <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />\r\n            <span>Last Training: </span>\r\n            <span className=\"ml-1 font-medium\">\r\n              {muscle.lastTrainingDate ? new Date(muscle.lastTrainingDate).toLocaleDateString() : 'Never'}\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            <Clock className=\"h-4 w-4 mr-2 text-muted-foreground\" />\r\n            <span>Rest Needed: </span>\r\n            <span className=\"ml-1 font-medium\">\r\n              {muscle.suggestedRestDays > 0 ? `${muscle.suggestedRestDays} days` : 'None'}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        {exercises.length > 0 && (\r\n          <>\r\n            <Separator className=\"my-2\" />\r\n            <div className=\"mt-3\">\r\n              <h4 className=\"text-sm font-medium mb-2\">Suggested Exercises:</h4>\r\n              <div className=\"grid grid-cols-1 gap-1\">\r\n                {exercises.map((exercise, index) => (\r\n                  <div key={index} className=\"text-sm px-2 py-1 bg-muted/40 rounded\">\r\n                    {exercise.exercise}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </>        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function MuscleFatiguePage() {\r\n  return (\r\n    <DashboardLayout>\r\n      <MuscleFatigueContent />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n"],"names":["__iconNode","Calendar","createLucideIcon","Info","TriangleAlert","DEFAULT_MAX_FATIGUE","DEFAULT_RECOVERY_RATE","DEFAULT_FATIGUE_THRESHOLD","calculateMuscleFatigue","logs","daysToConsider","settings","sleepLogs","maxFatigue","recoveryRate","thresholds","daysToUse","currentDate","cutoffDate","recentLogs","log","muscleGroups","muscleTrainingData","group","logDate","volume","intensity","maxVolume","data","fatigue","totalRecovery","recoveryStatus","suggestedRestDays","getMusclesReadyForTraining","fatigueData","getMusclesNeedingRest","calculateRecoveryProfiles","muscleGroupLogs","muscleGroup","muscleGroupHistory","sortedLogs","a","b","totalDays","countIntervals","i","currDate","nextDate","days","averageRecoveryDays","personalizedRecoveryRate","optimalTrainingFrequency","generateFatigueInsights","recoveryProfiles","insights","profile","WorkoutRecommender","exercises","useExercises","saveTemplate","startWorkout","useWorkoutTemplates","useFatigueSettings","convertAndFormatWeight","useMetricConversion","workoutType","setWorkoutType","useState","duration","setDuration","isGenerating","setIsGenerating","recommendedWorkout","setRecommendedWorkout","readyMuscles","useMemo","getExercisesByMuscleGroups","count","filteredExercises","ex","m","selectedExercises","muscleExercises","randomIndex","exercise","getRecommendedSets","getRecommendedReps","remainingExercises","intensityValue","generateWorkout","toast","targetMuscles","exerciseCount","workoutName","workoutDescription","muscle","workoutExercises","handleSaveTemplate","uuidv4","handleStartWorkout","templateName","Card","jsxs","CardHeader","CardTitle","jsx","Lightbulb","CardDescription","CardContent","Select","value","SelectTrigger","SelectValue","SelectContent","SelectItem","Button","index","CardFooter","Save","PlayCircle","MuscleFatigueAnalytics","currentFatigue","logsByDate","grouped","date","_a","result","today","dateStr","logsBeforeDate","f","primaryMuscleGroups","groups","trainingFrequency","frequency","daysPerWorkout","recoveryPatterns","patterns","prevDate","TrendingUp","Tabs","TabsList","TabsTrigger","TabsContent","ResponsiveContainer","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Bar","Separator","dayLogs","item","idx","pattern","insight","insightType","AllFatigueInsights","allInsights","warningInsights","positiveInsights","infoInsights","InsightsList","AlertCircle","CheckCircle","MuscleFatigueContent","appStore","useConsolidatedApp","setCurrentView","workoutLogs","useWorkoutLogs","getExercisesByMuscleGroup","groupedMuscles","ArrowLeft","Activity","Check","Clock","AlertTriangle","MuscleDetails","getExercises","exerciseName","getFatigueColor","getStatusColor","status","getStatusIcon","Progress","Fragment","MuscleFatiguePage","DashboardLayout"],"mappings":"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","x_google_ignoreList":[0,1,2]}