{"version":3,"file":"db-utils-DgoSxAK8.js","sources":["../../node_modules/idb/build/index.js","../../src/lib/pwa-utils.ts"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { openDB, IDBPDatabase } from 'idb';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface SyncQueueItem {\r\n  id: string;\r\n  timestamp: number;\r\n  endpoint: string;\r\n  method: string;\r\n  body: unknown;\r\n  headers: Record<string, string>;\r\n  retries: number;\r\n}\r\n\r\n// Database structure\r\nconst DB_NAME = 'workout-log-pwa';\r\nconst DB_VERSION = 1;\r\nconst SYNC_QUEUE_STORE = 'sync-queue';\r\nconst WORKOUT_DATA_STORE = 'workout-data';\r\nconst SETTINGS_STORE = 'settings';\r\n\r\n// Initialize IndexedDB\r\nasync function getDB(): Promise<IDBPDatabase> {\r\n  return openDB(DB_NAME, DB_VERSION, {\r\n    upgrade(db) {\r\n      // Create stores if they don't exist\r\n      if (!db.objectStoreNames.contains(SYNC_QUEUE_STORE)) {\r\n        db.createObjectStore(SYNC_QUEUE_STORE, { keyPath: 'id' });\r\n      }\r\n      \r\n      if (!db.objectStoreNames.contains(WORKOUT_DATA_STORE)) {\r\n        const workoutStore = db.createObjectStore(WORKOUT_DATA_STORE, { keyPath: 'id' });\r\n        workoutStore.createIndex('type', 'type');\r\n        workoutStore.createIndex('date', 'date');\r\n      }\r\n      \r\n      if (!db.objectStoreNames.contains(SETTINGS_STORE)) {\r\n        db.createObjectStore(SETTINGS_STORE, { keyPath: 'key' });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Add an API request to the sync queue when offline\r\nexport async function queueAPIRequest(\r\n  endpoint: string,\r\n  method: string,\r\n  body: unknown,\r\n  headers: Record<string, string>\r\n): Promise<string> {  const db = await getDB();\r\n  const id = uuidv4();\r\n  const queueItem: SyncQueueItem = {\r\n    id,\r\n    timestamp: Date.now(),\r\n    endpoint,\r\n    method,\r\n    body,\r\n    headers,\r\n    retries: 0\r\n  };\r\n  \r\n  await db.add(SYNC_QUEUE_STORE, queueItem);\r\n  return id;\r\n}\r\n\r\n// Process the sync queue when back online\r\nexport async function processSyncQueue(): Promise<void> {\r\n  const db = await getDB();\r\n  const tx = db.transaction(SYNC_QUEUE_STORE, 'readwrite');\r\n  const store = tx.objectStore(SYNC_QUEUE_STORE);\r\n  const items = await store.getAll();\r\n  \r\n  for (const item of items) {\r\n    try {\r\n      const response = await fetch(item.endpoint, {\r\n        method: item.method,\r\n        headers: item.headers,\r\n        body: item.method !== 'GET' ? JSON.stringify(item.body) : undefined,\r\n      });\r\n      \r\n      if (response.ok) {\r\n        // If successful, remove from queue\r\n        await store.delete(item.id);\r\n      } else {\r\n        // If failed, increment retry count\r\n        item.retries += 1;\r\n        if (item.retries < 5) {\r\n          await store.put(item);\r\n        } else {\r\n          // If too many retries, remove from queue\r\n          await store.delete(item.id);\r\n          console.error(`Failed to sync ${item.endpoint} after 5 retries`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error processing sync queue item:`, error);\r\n    }\r\n  }\r\n  \r\n  await tx.done;\r\n}\r\n\r\n// Define a type for workout data\r\ninterface WorkoutData {\r\n  id?: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\n// Save workout data to IndexedDB for offline access\r\nexport async function saveWorkoutData(data: WorkoutData): Promise<string> {\r\n  const db = await getDB();  // Ensure the data has an ID\r\n  if (!data.id) {\r\n    data.id = `local-${uuidv4()}`;\r\n  }\r\n  \r\n  await db.put(WORKOUT_DATA_STORE, data);\r\n  return data.id;\r\n}\r\n\r\n// Retrieve workout data from IndexedDB\r\nexport async function getWorkoutData(id: string): Promise<WorkoutData | null> {\r\n  const db = await getDB();\r\n  return db.get(WORKOUT_DATA_STORE, id);\r\n}\r\n\r\n// Get all workout data by type\r\nexport async function getAllWorkoutData(type: string): Promise<WorkoutData[]> {\r\n  const db = await getDB();\r\n  const tx = db.transaction(WORKOUT_DATA_STORE, 'readonly');\r\n  const index = tx.store.index('type');\r\n  return index.getAll(type);\r\n}\r\n\r\n// Save application settings\r\nexport async function saveSetting(key: string, value: unknown): Promise<void> {\r\n  const db = await getDB();\r\n  await db.put(SETTINGS_STORE, { key, value });\r\n}\r\n\r\n// Get application settings\r\nexport async function getSetting(key: string): Promise<unknown | null> {\r\n  const db = await getDB();\r\n  const result = await db.get(SETTINGS_STORE, key);\r\n  return result ? result.value : null;\r\n}\r\n\r\n// Register online/offline event listeners\r\nexport function registerNetworkListeners(): void {\r\n  window.addEventListener('online', async () => {\r\n    console.log('App is online. Processing sync queue...');\r\n    await processSyncQueue();\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    console.log('App is offline. Requests will be queued for later.');\r\n  });\r\n}\r\n\r\n// Check if the app is installed as PWA\r\nexport function isPWAInstalled(): boolean {\r\n  return window.matchMedia('(display-mode: standalone)').matches ||\r\n         (window.navigator as unknown as {standalone?: boolean}).standalone === true;\r\n}\r\n\r\n// Check if the browser supports service workers\r\nexport function supportsServiceWorker(): boolean {\r\n  return 'serviceWorker' in navigator;\r\n}\r\n\r\n// Handle development mode service worker issues\r\nexport async function handleServiceWorkerDev(): Promise<void> {\r\n  // Only run in development mode\r\n  if (import.meta.env.DEV && supportsServiceWorker()) {\r\n    try {\r\n      // Check if we have any existing service worker registrations\r\n      const registrations = await navigator.serviceWorker.getRegistrations();\r\n      \r\n      // If we have more than one registration, unregister all of them to prevent conflicts\r\n      if (registrations.length > 1) {\r\n        console.log('Multiple service workers found, cleaning up...');\r\n        for (const registration of registrations) {\r\n          await registration.unregister();\r\n          console.log('Unregistered service worker for scope:', registration.scope);\r\n        }\r\n        \r\n        // Reload to ensure clean state\r\n        window.location.reload();\r\n        return;\r\n      }\r\n      \r\n      // Check for the dev service worker specifically\r\n      const activeDevSw = registrations.find(r => r.active && r.active.scriptURL.includes('dev-sw.js'));\r\n      \r\n      // If we don't have the dev service worker active, but have a different one, clean up\r\n      if (!activeDevSw && registrations.length > 0) {\r\n        console.log('Cleaning up non-development service worker');\r\n        await Promise.all(registrations.map(r => r.unregister()));\r\n        window.location.reload();\r\n      }\r\n    } catch (error) {\r\n      console.warn('Error handling development service worker:', error);\r\n    }\r\n  }\r\n}\r\n"],"names":["instanceOfAny","object","constructors","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","transactionDoneMap","transformCache","reverseTransformCache","promisifyRequest","request","promise","resolve","reject","unlisten","success","error","wrap","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","value","replaceTraps","callback","wrapFunction","func","args","unwrap","transformCachableValue","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","openPromise","event","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","method","storeName","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","proxiedCursor","isIteratorProp","DB_NAME","DB_VERSION","SYNC_QUEUE_STORE","WORKOUT_DATA_STORE","SETTINGS_STORE","getDB","workoutStore","processSyncQueue","store","items","item","registerNetworkListeners"],"mappings":"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","x_google_ignoreList":[0]}