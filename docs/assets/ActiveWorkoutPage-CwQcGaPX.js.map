{"version":3,"file":"ActiveWorkoutPage-CwQcGaPX.js","sources":["../../node_modules/lucide-react/dist/esm/icons/list.js","../../node_modules/lucide-react/dist/esm/icons/star.js","../../src/components/ui/textarea.tsx","../../src/views/ActiveWorkoutPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M3 12h.01\", key: \"nlz23k\" }],\n  [\"path\", { d: \"M3 18h.01\", key: \"1tta3j\" }],\n  [\"path\", { d: \"M3 6h.01\", key: \"1rqtza\" }],\n  [\"path\", { d: \"M8 12h13\", key: \"1za7za\" }],\n  [\"path\", { d: \"M8 18h13\", key: \"1lx6n3\" }],\n  [\"path\", { d: \"M8 6h13\", key: \"ik3vkj\" }]\n];\nconst List = createLucideIcon(\"list\", __iconNode);\n\nexport { __iconNode, List as default };\n//# sourceMappingURL=list.js.map\n","/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\n    \"path\",\n    {\n      d: \"M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z\",\n      key: \"r04s7s\"\n    }\n  ]\n];\nconst Star = createLucideIcon(\"star\", __iconNode);\n\nexport { __iconNode, Star as default };\n//# sourceMappingURL=star.js.map\n","import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\r\n  return (\r\n    <textarea\r\n      data-slot=\"textarea\"\r\n      className={cn(\r\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Textarea }\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DashboardLayout } from '@/components/DashboardLayout';\r\nimport { useWorkoutTemplates, useWorkoutLogs } from '@/hooks/useConsolidatedApp';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Dialog, DialogContent, DialogTitle, DialogDescription, DialogFooter, DialogHeader } from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { toast } from \"sonner\";\r\nimport { Dumbbell, Clock, CheckCircle, ArrowLeft, Save, Edit, Plus, Star, TrendingUp, List } from \"lucide-react\";\r\nimport { useRouter } from '@/lib/utils';\r\nimport { WorkoutExercise } from '@/types/Workout_Templates';\r\n\r\nconst ActiveWorkoutPage: React.FC = () => {\r\n  const { activeWorkout, updateActiveWorkout, completeWorkout, addExerciseSet } = useWorkoutTemplates();\r\n  const { addWorkoutLog, getPreviousHighestVolumeWorkout } = useWorkoutLogs();\r\n  const router = useRouter();\r\n  \r\n  // Set up state\r\n  const [notes, setNotes] = useState(\"\");\r\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState<number | null>(null);\r\n  const [exerciseLogOpen, setExerciseLogOpen] = useState(false);\r\n  const [confirmCompleteOpen, setConfirmCompleteOpen] = useState(false);\r\n  const [restTimerActive, setRestTimerActive] = useState(false);\r\n  const [restStartTime, setRestStartTime] = useState<number | null>(null);\r\n  const [currentLogExercise, setCurrentLogExercise] = useState<{\r\n    name: string;\r\n    muscleGroup: string;\r\n    sets: number;\r\n    reps: number;\r\n    weight: number;\r\n    setsCompleted?: number;\r\n    index: number;\r\n    rating?: number;\r\n  } | null>(null);\r\n  const [exerciseNotes, setExerciseNotes] = useState(\"\");\r\n  const [notesDialogOpen, setNotesDialogOpen] = useState(false);\r\n  const [currentWeight, setCurrentWeight] = useState<number>(0);\r\n  const [currentReps, setCurrentReps] = useState<number>(0);\r\n  const [currentRating, setCurrentRating] = useState<number>(3); // Default rating (1-5)\r\n  const [isSaving, setIsSaving] = useState(false);\r\n    // Define proper type for volume workouts\r\n  type WorkoutAnalysisSet = {\r\n    id: string;\r\n    weight: number;\r\n    reps: number;\r\n    rating: number;\r\n    restTime: number | null;\r\n    volume: number;\r\n    used?: boolean;\r\n  };\r\n  \r\n  // Ensure this type matches what getPreviousHighestVolumeWorkout returns\r\n  interface WorkoutAnalysis {\r\n    date: string;\r\n    totalVolume: number;\r\n    maxWeight: number;\r\n    totalReps: number;\r\n    weight: number;\r\n    reps: number;\r\n    highestVolumeDate: string;\r\n    totalSets: number;\r\n    allSets: WorkoutAnalysisSet[];\r\n    highestVolume: {\r\n      date: string;\r\n      totalVolume: number;\r\n      maxWeight: number;\r\n      totalReps: number;\r\n      weight: number;\r\n      reps: number;\r\n    };\r\n    progressionTargets: {\r\n      targetVolume: number;\r\n      progressionRate: number;\r\n      sameWeightMoreReps: {\r\n        weight: number;\r\n        reps: number;\r\n        additionalReps: number;\r\n        sets: number;\r\n      };\r\n      moreSets: {\r\n        weight: number;\r\n        reps: number;\r\n        additionalSets: number;\r\n        sets: number;\r\n      };\r\n      balancedProgression: {\r\n        weight: number;\r\n        reps: number;\r\n        additionalReps: number;\r\n        sets: number;\r\n        additionalSets: number;\r\n      }\r\n    }\r\n  };\r\n  \r\n  const [previousHighestVolumeWorkouts, setPreviousHighestVolumeWorkouts] = useState<{[key: string]: WorkoutAnalysis | null}>({});\r\n  \r\n  // Set up defaults\r\n  const defaultRestBetweenSets = 60; // seconds\r\n  const defaultRestBetweenExercises = 90; // seconds\r\n\r\n  // Check if we have an active workout, if not redirect to dashboard\r\n  useEffect(() => {\r\n    if (!activeWorkout) {\r\n      router.push('/');\r\n    } else {\r\n      // Initialize notes from active workout\r\n      setNotes(activeWorkout.notes || \"\");\r\n      \r\n      // Find the first incomplete exercise\r\n      const firstIncompleteIdx = activeWorkout.exercises.findIndex(\r\n        ex => (ex.setsCompleted || 0) < ex.sets\r\n      );\r\n      \r\n      if (firstIncompleteIdx !== -1) {\r\n        setCurrentExerciseIndex(firstIncompleteIdx);\r\n      }\r\n    }\r\n  }, [activeWorkout, router]);\r\n  \r\n  // Update form values when currentLogExercise changes\r\n  useEffect(() => {\r\n    if (currentLogExercise) {\r\n      setCurrentWeight(currentLogExercise.weight || 0);\r\n      setCurrentReps(currentLogExercise.reps || 0);\r\n    }\r\n  }, [currentLogExercise]);\r\n  \r\n  // Format time since workout started\r\n  const formatElapsedTime = () => {\r\n    if (!activeWorkout) return \"00:00\";\r\n    \r\n    const startTime = new Date(activeWorkout.startTime);\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - startTime.getTime();\r\n    \r\n    const minutes = Math.floor((diffMs / 1000) / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    \r\n    return `${hours > 0 ? `${hours}h ` : ''}${mins < 10 ? '0' : ''}${mins}m`;\r\n  };\r\n\r\n  // Format rest timer\r\n  const formatRestTime = () => {\r\n    if (!restTimerActive || !restStartTime) return \"00:00\";\r\n    \r\n    const now = Date.now();\r\n    const elapsedSec = Math.floor((now - restStartTime) / 1000);\r\n    \r\n    const mins = Math.floor(elapsedSec / 60);\r\n    const secs = elapsedSec % 60;\r\n    \r\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\r\n  };\r\n\r\n  // Add a new exercise to the workout based on muscle fatigue suggestions\r\n  const handleAddSuggestedExercise = (exerciseName: string, muscleGroup: string) => {\r\n    if (!activeWorkout) return;\r\n    \r\n    // Create a new exercise with default values\r\n    const newExercise: WorkoutExercise = {\r\n      name: exerciseName,\r\n      muscleGroup: muscleGroup,\r\n      sets: 3, // Default to 3 sets\r\n      reps: 10, // Default to 10 reps\r\n      weight: 0, // Default to no weight\r\n      setsCompleted: 0,\r\n      percentComplete: 0,\r\n      // Add required fields for WorkoutExercise\r\n      rest: 60,\r\n      notes: '',\r\n      difficultyLevel: 'Moderate',\r\n      equipmentRequired: 'None',\r\n      targetIntensity: 'Medium',\r\n      primaryMuscleGroup: muscleGroup,\r\n      secondaryMuscleGroup: '',\r\n      exerciseDuration: '',\r\n      recoveryTime: '',\r\n      exerciseType: 'Strength',\r\n      caloriesBurned: '',\r\n      exerciseProgression: '',\r\n      injuryRiskLevel: 'Low',\r\n      exerciseLink: '',\r\n      imageLink: '',\r\n      relativePath: ''\r\n    };\r\n    \r\n    // Add the exercise to the workout\r\n    const updatedExercises = [...activeWorkout.exercises, newExercise];\r\n    updateActiveWorkout({ exercises: updatedExercises });\r\n    \r\n    toast.success(\"Exercise Added\", {\r\n      description: `${exerciseName} added to your workout`\r\n    });\r\n  };\r\n\r\n  // Start the rest timer\r\n  const startRestTimer = (duration = defaultRestBetweenSets) => {\r\n    setRestStartTime(Date.now());\r\n    setRestTimerActive(true);\r\n    \r\n    toast(\"Rest Timer Started\", {\r\n      description: `Rest timer started for ${duration} seconds`,\r\n    });\r\n  };\r\n\r\n  // Stop the rest timer and return elapsed time in seconds\r\n  const stopRestTimer = () => {\r\n    if (!restStartTime) return 0;\r\n    \r\n    const elapsedSeconds = Math.round((Date.now() - restStartTime) / 1000);\r\n    setRestTimerActive(false);\r\n    setRestStartTime(null);\r\n    \r\n    return elapsedSeconds;\r\n  };\r\n\r\n  // Function to manually stop the rest timer (can be called from UI)\r\n  const handleStopRestTimer = () => {\r\n    stopRestTimer();\r\n    toast(\"Rest Timer Stopped\", {\r\n      description: \"Rest timer has been stopped\",\r\n    });\r\n  };\r\n  \r\n  // Calculate overall progress\r\n  const calculateOverallProgress = () => {\r\n    if (!activeWorkout || !activeWorkout.exercises) return 0;\r\n    \r\n    let totalSets = 0;\r\n    let completedSets = 0;\r\n    \r\n    activeWorkout.exercises.forEach(ex => {\r\n      totalSets += ex.sets;\r\n      completedSets += ex.setsCompleted || 0;\r\n    });\r\n    \r\n    return totalSets === 0 ? 0 : Math.round((completedSets / totalSets) * 100);\r\n  };\r\n  // Handle set complete\r\n  const handleSetComplete = (exerciseIndex: number) => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const exercise = activeWorkout.exercises[exerciseIndex];\r\n    const currentSetsCompleted = exercise.setsCompleted || 0;\r\n    \r\n    if (currentSetsCompleted < exercise.sets) {\r\n      // Get previous highest volume workout for this exercise and muscle group\r\n      const rawPrevHighestVolume = getPreviousHighestVolumeWorkout(exercise.name, exercise.muscleGroup);\r\n      \r\n      // Convert the returned data to our local interface format with proper typing\r\n      let typedPrevHighestVolume: WorkoutAnalysis | null = null;\r\n      \r\n      if (rawPrevHighestVolume) {\r\n        typedPrevHighestVolume = {\r\n          ...rawPrevHighestVolume,\r\n          // Ensure proper types for allSets\r\n          allSets: rawPrevHighestVolume.allSets?.map(set => ({\r\n            id: set.id,\r\n            weight: set.weight,\r\n            reps: set.reps,\r\n            rating: set.rating,\r\n            restTime: set.restTime === undefined ? null : set.restTime,\r\n            volume: set.volume,\r\n            used: false // Initialize as unused\r\n          })) || []\r\n        };\r\n      }\r\n      \r\n      // Open the exercise log dialog\r\n      setCurrentExerciseIndex(exerciseIndex);\r\n      setCurrentWeight(exercise.weight || 0);\r\n      setCurrentReps(exercise.reps || 0);\r\n      setCurrentRating(3); // Default rating\r\n      setCurrentLogExercise({\r\n        ...exercise,\r\n        index: exerciseIndex\r\n      });\r\n      \r\n      // Store the previous highest volume workout data for this exercise\r\n      if (typedPrevHighestVolume) {\r\n        setPreviousHighestVolumeWorkouts(prev => {\r\n          const newState = { ...prev };\r\n          newState[`${exercise.name}_${exercise.muscleGroup}`] = typedPrevHighestVolume;\r\n          return newState;\r\n        });\r\n      }\r\n      \r\n      setExerciseLogOpen(true);\r\n    }\r\n  };\r\n  \r\n  // Handle log submission\r\n  const handleLogSubmit = async () => {\r\n    if (!activeWorkout || currentExerciseIndex === null || !currentLogExercise) return;\r\n    \r\n    setIsSaving(true);\r\n    \r\n    try {\r\n      const exerciseIndex = currentLogExercise.index;\r\n      const exercise = activeWorkout.exercises[exerciseIndex];\r\n      const currentSetsCompleted = exercise.setsCompleted || 0;\r\n      \r\n      // Update the exercise progress in the active workout\r\n      if (currentSetsCompleted < exercise.sets) {\r\n        // First update the exercise with the new weight/reps\r\n        const updatedExercises = [...activeWorkout.exercises];\r\n        updatedExercises[exerciseIndex] = {\r\n          ...updatedExercises[exerciseIndex],\r\n          weight: currentWeight,\r\n          reps: currentReps,\r\n          setsCompleted: currentSetsCompleted + 1,\r\n          percentComplete: ((currentSetsCompleted + 1) / exercise.sets) * 100\r\n        };\r\n        \r\n        // Update the active workout with all changes at once\r\n        updateActiveWorkout({ exercises: updatedExercises });\r\n        \r\n        // Save to workout log sheet      \r\n        try {\r\n          // Get the actual rest time from the timer (if active) or use default\r\n          const actualRestTime = restTimerActive && restStartTime \r\n            ? Math.round((Date.now() - restStartTime) / 1000)\r\n            : exercise.rest || defaultRestBetweenSets;\r\n            \r\n          await addWorkoutLog({\r\n            date: new Date().toISOString().split(\"T\")[0],\r\n            muscleGroup: exercise.muscleGroup,\r\n            exercise: exercise.name,\r\n            reps: currentReps,\r\n            weight: currentWeight,\r\n            rating: currentRating,\r\n            restTime: actualRestTime\r\n          });\r\n          \r\n          // Mark a set as used after completion\r\n          if (currentLogExercise) {\r\n            const workoutKey = `${exercise.name}_${exercise.muscleGroup}`;\r\n            const prevWorkout = previousHighestVolumeWorkouts[workoutKey];\r\n            \r\n            if (prevWorkout && prevWorkout.allSets && prevWorkout.allSets.length > 0) {\r\n              // Find the first unused set\r\n              const updatedSets = [...prevWorkout.allSets];\r\n              const unusedSetIndex = updatedSets.findIndex(set => !set.used);\r\n              \r\n              if (unusedSetIndex !== -1) {\r\n                updatedSets[unusedSetIndex] = {\r\n                  ...updatedSets[unusedSetIndex],\r\n                  used: true\r\n                };\r\n                  setPreviousHighestVolumeWorkouts(prev => {\r\n                  const newState = { ...prev };\r\n                  if (newState[workoutKey]) {\r\n                    newState[workoutKey] = {\r\n                      ...newState[workoutKey]!,\r\n                      allSets: updatedSets\r\n                    };\r\n                  }\r\n                  return newState;\r\n                });\r\n              }\r\n            }\r\n          }\r\n          \r\n          toast.success(\"Set Completed\", {\r\n            description: `${exercise.name} set ${currentSetsCompleted + 1}/${exercise.sets} logged`,\r\n          });\r\n        } catch (err) {\r\n          console.error(\"Failed to log workout set:\", err);\r\n          toast.error(\"Error\", {\r\n            description: \"Failed to log workout set. Will try again when online.\",\r\n          });\r\n          toast(\"Debug Info\", {\r\n            description: \"Check network connectivity and try again\",\r\n          });\r\n        }\r\n        \r\n        // Close the dialog\r\n        setExerciseLogOpen(false);\r\n                \r\n        // Check if all sets are complete\r\n        if (currentSetsCompleted + 1 >= exercise.sets) {\r\n          // Find next incomplete exercise\r\n          const nextIncompleteIdx = activeWorkout.exercises.findIndex(\r\n            (ex, idx) => idx > exerciseIndex && (ex.setsCompleted || 0) < ex.sets\r\n          );\r\n          \r\n          if (nextIncompleteIdx !== -1) {\r\n            // Start longer rest between exercises\r\n            startRestTimer(defaultRestBetweenExercises);\r\n            // Set the next exercise as current\r\n            setCurrentExerciseIndex(nextIncompleteIdx);\r\n          } else {\r\n            // Start regular rest timer\r\n            startRestTimer(exercise.rest || defaultRestBetweenSets);\r\n            \r\n            // All exercises complete          \r\n            toast.success(\"Workout Complete\", {\r\n              description: \"All exercises have been completed! You can finish your workout.\",\r\n            });\r\n          }\r\n        } else {\r\n          // Start regular rest timer for the same exercise's next set\r\n          startRestTimer(exercise.rest || defaultRestBetweenSets);\r\n        }\r\n      }    \r\n    } catch (err) {\r\n      console.error(\"Failed to update exercise progress:\", err);\r\n      toast.error(\"Error\", {\r\n        description: \"Failed to update exercise progress. Please try again.\",\r\n      });\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n  \r\n  // Handle exercise notes save\r\n  const handleSaveExerciseNotes = () => {\r\n    if (!activeWorkout || currentExerciseIndex === null) return;\r\n    \r\n    const updatedExercises = [...activeWorkout.exercises];\r\n    updatedExercises[currentExerciseIndex] = {\r\n      ...updatedExercises[currentExerciseIndex],\r\n      notes: exerciseNotes\r\n    };\r\n    \r\n    updateActiveWorkout({ exercises: updatedExercises });\r\n    setNotesDialogOpen(false);\r\n    toast(\"Notes Saved\", {\r\n      description: \"Exercise notes have been updated.\",\r\n    });\r\n  };\r\n  \r\n  // Handle workout notes save\r\n  const handleSaveWorkoutNotes = () => {\r\n    if (!activeWorkout) return;\r\n    \r\n    updateActiveWorkout({ notes });\r\n    toast(\"Notes Saved\", {\r\n      description: \"Workout notes have been updated.\",\r\n    });\r\n  };\r\n  \r\n  // Handle workout complete\r\n  const handleCompleteWorkout = async () => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const result = await completeWorkout();\r\n    if (result.success) {\r\n      toast.success(\"Workout Completed\", {\r\n        description: \"Your workout has been saved.\",\r\n      });\r\n      \r\n      router.push('/');\r\n    } else {\r\n      toast.error(\"Error\", {\r\n        description: result.error || \"Failed to complete workout\",\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Handle add extra set\r\n  const handleAddExtraSet = (exerciseIndex: number) => {\r\n    if (!activeWorkout) return;\r\n    addExerciseSet(exerciseIndex);\r\n    \r\n    toast(\"Set Added\", {\r\n      description: `Added an extra set to ${activeWorkout.exercises[exerciseIndex].name}`,\r\n    });\r\n  };\r\n\r\n  // Update UI when timer is active\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | null = null;\r\n    \r\n    if (restTimerActive) {\r\n      // Create a new interval that runs every 1000ms (1 second)\r\n      interval = setInterval(() => {\r\n        // This empty callback forces React to re-render\r\n        // which will update the timer display since formatRestTime reads current time\r\n        forceUpdate({});\r\n      }, 1000);\r\n    }\r\n    \r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [restTimerActive]);\r\n  \r\n  // Create a simple method to force component update\r\n  const [, forceUpdate] = useState({});\r\n  \r\n  if (!activeWorkout) {\r\n    return <div className=\"flex justify-center items-center h-full\">Loading workout...</div>;\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto p-4\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <div className=\"flex items-center\">\r\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => router.push('/')}>\r\n              <ArrowLeft className=\"h-5 w-5\" />\r\n            </Button>\r\n            <h1 className=\"text-2xl font-bold ml-2\">Active Workout</h1>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"flex items-center text-sm\">\r\n              <Clock className=\"h-4 w-4 mr-1 text-muted-foreground\" />\r\n              <span>{formatElapsedTime()}</span>\r\n            </div>            \r\n            {restTimerActive && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant=\"outline\" className=\"bg-primary/10 text-primary flex items-center gap-1\">\r\n                  <Clock className=\"h-3 w-3\" />\r\n                  Rest: {formatRestTime()}\r\n                </Badge>\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  className=\"h-6 px-2 text-xs\"\r\n                  onClick={handleStopRestTimer}\r\n                >\r\n                  Stop\r\n                </Button>\r\n              </div>\r\n            )}\r\n            \r\n            <Button\r\n              variant=\"default\"\r\n              size=\"sm\"\r\n              onClick={() => setConfirmCompleteOpen(true)}\r\n            >\r\n              <CheckCircle className=\"h-4 w-4 mr-2\" /> \r\n              Finish Workout\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Workout Info */}\r\n        <Card className=\"mb-6\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex flex-col md:flex-row justify-between gap-4 mb-4\">\r\n              <div>\r\n                <h2 className=\"text-xl font-semibold\">{activeWorkout.templateName}</h2>\r\n                <p className=\"text-muted-foreground\">{activeWorkout.description}</p>\r\n              </div>\r\n              \r\n              <div className=\"flex flex-col\">\r\n                <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\r\n                  <span>Overall Progress:</span>\r\n                  <span className=\"font-medium\">{calculateOverallProgress()}%</span>\r\n                </div>\r\n                <Progress value={calculateOverallProgress()} className=\"w-40\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <div className=\"md:col-span-2\">\r\n            <div className=\"mb-4 flex justify-between items-center\">\r\n              <h2 className=\"text-lg font-semibold\">Exercises</h2>\r\n            </div>\r\n            \r\n            <ScrollArea className=\"h-[calc(100vh-300px)]\">\r\n              <div className=\"space-y-4 pr-4\">\r\n                {activeWorkout.exercises.map((exercise, idx) => {\r\n                  const isCompleted = (exercise.setsCompleted || 0) >= exercise.sets;\r\n                  const isCurrent = idx === currentExerciseIndex;\r\n                  \r\n                  return (\r\n                    <Card \r\n                      key={idx} \r\n                      className={`${isCurrent ? 'border-primary/50 bg-primary/5' : isCompleted ? 'border-muted bg-muted/20' : ''}`}\r\n                    >\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex justify-between items-start mb-3\">\r\n                          <div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <Dumbbell className={`h-4 w-4 ${isCurrent ? 'text-primary' : 'text-muted-foreground'}`} />\r\n                              <h3 className=\"font-medium text-lg\">\r\n                                {exercise.name}\r\n                              </h3>\r\n                            </div>\r\n                            <div className=\"text-sm text-muted-foreground\">\r\n                              {exercise.sets} sets × {exercise.reps} reps\r\n                              {exercise.weight > 0 && ` @ ${exercise.weight}`}\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          <Badge>\r\n                            {(exercise.setsCompleted || 0)}/{exercise.sets} Sets\r\n                          </Badge>\r\n                        </div>\r\n                        \r\n                        <Progress \r\n                          value={((exercise.setsCompleted || 0) / exercise.sets) * 100} \r\n                          className=\"h-1.5 mb-4\"\r\n                        />\r\n                        \r\n                        <div className=\"flex flex-wrap gap-2\">\r\n                          {Array.from({ length: exercise.sets }).map((_, setIdx) => {\r\n                            const isSetCompleted = (exercise.setsCompleted || 0) > setIdx;\r\n                            \r\n                            return (\r\n                              <Button\r\n                                key={setIdx}\r\n                                size=\"sm\"\r\n                                variant={isSetCompleted ? \"default\" : \"outline\"}\r\n                                className={isSetCompleted ? \"opacity-70\" : \"\"}\r\n                                onClick={() => !isSetCompleted && handleSetComplete(idx)}\r\n                                disabled={isSetCompleted}\r\n                              >\r\n                                {isSetCompleted ? (\r\n                                  <CheckCircle className=\"h-3.5 w-3.5 mr-1\" />\r\n                                ) : null}\r\n                                Set {setIdx + 1}\r\n                              </Button>\r\n                            );\r\n                          })}\r\n                          \r\n                          {/* Button to add an extra set if all sets are completed */}\r\n                          {isCompleted && (\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"secondary\"\r\n                              onClick={() => handleAddExtraSet(idx)}\r\n                            >\r\n                              <Plus className=\"h-3.5 w-3.5 mr-1\" />\r\n                              Extra Set\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        {exercise.notes ? (\r\n                          <div className=\"mt-3 text-sm p-2 bg-muted rounded-md\">\r\n                            <span className=\"font-medium\">Notes:</span> {exercise.notes}\r\n                          </div>\r\n                        ) : (\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"ghost\"\r\n                            className=\"mt-2 text-xs\"\r\n                            onClick={() => {\r\n                              setCurrentExerciseIndex(idx);\r\n                              setExerciseNotes(exercise.notes || '');\r\n                              setNotesDialogOpen(true);\r\n                            }}\r\n                          >\r\n                            <Edit className=\"h-3 w-3 mr-1\" />\r\n                            Add Notes\r\n                          </Button>\r\n                        )}\r\n                      </CardContent>\r\n                    </Card>\r\n                  );\r\n                })}\r\n              </div>\r\n            </ScrollArea>\r\n          </div>\r\n          \r\n          <div>\r\n            <Card className=\"sticky top-4\">\r\n              <CardContent className=\"p-4\">\r\n                <h3 className=\"font-medium text-lg mb-2\">Workout Notes</h3>\r\n                \r\n                <Textarea\r\n                  placeholder=\"Add notes about your workout here...\"\r\n                  value={notes}\r\n                  onChange={(e) => setNotes(e.target.value)}\r\n                  className=\"min-h-[150px] mb-4\"\r\n                />\r\n                \r\n                <Button onClick={handleSaveWorkoutNotes} className=\"w-full\">\r\n                  <Save className=\"h-4 w-4 mr-2\" />\r\n                  Save Notes\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Exercise Log Dialog */}\r\n      <Dialog open={exerciseLogOpen} onOpenChange={setExerciseLogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Log Exercise Set</DialogTitle>\r\n            <DialogDescription>\r\n              Record details for {currentLogExercise?.name} - Set {(currentLogExercise?.setsCompleted || 0) + 1}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n\r\n          {/* Previous highest volume record with progression targets */}\r\n          {currentLogExercise && previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`] && (\r\n            <div className=\"bg-muted/50 p-3 rounded-md border border-muted mb-2\">\r\n              <div className=\"flex items-center gap-1 text-sm font-medium mb-1 text-primary\">\r\n                <TrendingUp className=\"h-4 w-4\" />\r\n                          <span>Previous Best ({previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.highestVolumeDate || 'N/A'})</span>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-3 gap-2 text-sm mb-2\">\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Available Volume:</span>{\" \"}\r\n                  <span className=\"font-medium\">\r\n                    {(() => {\r\n                      const prevWorkout = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`];\r\n                      if (!prevWorkout?.allSets) return \"0\";\r\n                      \r\n                      // Calculate remaining volume (only from unused sets)\r\n                      const remainingVolume = prevWorkout.allSets\r\n                        .filter(set => !set.used)\r\n                        .reduce((sum, set) => sum + set.volume, 0);\r\n                      \r\n                      return remainingVolume.toFixed(1);\r\n                    })()}\r\n                  </span>\r\n                  {\" \"}\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    / {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.totalVolume?.toFixed(1)}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Max Weight:</span>{\" \"}\r\n                  <span className=\"font-medium\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.weight}</span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Available Sets:</span>{\" \"}\r\n                  <span className=\"font-medium\">\r\n                    {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.allSets?.filter(set => !set.used).length || 0}\r\n                    {\" \"}\r\n                    <span className=\"text-xs text-muted-foreground\">\r\n                    / {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.totalSets || 0}\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Detailed set information */}\r\n              <div className=\"text-xs mb-2\">\r\n                <div className=\"flex justify-between items-center mb-1\">\r\n                  <span className=\"font-medium text-primary/80 flex items-center gap-1\">\r\n                    <List className=\"h-3 w-3\" />\r\n                    <span>\r\n                      All Sets from Best Workout \r\n                      ({previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.allSets?.length || 0} total sets)\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n                <div className=\"bg-muted/70 rounded-md overflow-hidden\">\r\n                  <div className=\"grid grid-cols-5 gap-2 p-1.5 text-[10px] font-medium text-muted-foreground border-b border-border/30\">\r\n                    <div>Set</div>\r\n                    <div>Weight</div>\r\n                    <div>Reps</div>\r\n                    <div>Volume</div>\r\n                    <div>Status</div>\r\n                  </div>\r\n\r\n                  <div className=\"max-h-32 overflow-y-auto\">\r\n                    {(() => {\r\n                      const sets = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.allSets;\r\n                      console.log('Sets data for debugging:', {\r\n                        exercise: currentLogExercise.name,\r\n                        muscleGroup: currentLogExercise.muscleGroup,\r\n                        sets: sets,\r\n                        setsLength: sets?.length,\r\n                        firstSet: sets?.[0]\r\n                      });\r\n                      \r\n                      if (!sets || sets.length === 0) {\r\n                        return (\r\n                          <div className=\"p-2 text-center text-xs text-muted-foreground\">\r\n                            No previous workout data available\r\n                          </div>\r\n                        );\r\n                      }\r\n                      \r\n                      return sets.map((set, idx) => (\r\n                        <div \r\n                          key={set.id} \r\n                          className={`grid grid-cols-5 gap-2 p-1.5 text-[10px] border-b border-border/20 hover:bg-muted transition-colors cursor-pointer ${set.used ? 'opacity-60 bg-green-50' : ''}`}\r\n                          onClick={() => {\r\n                            setCurrentWeight(set.weight);\r\n                            setCurrentReps(set.reps);\r\n                          }}\r\n                        >\r\n                          <div>{idx + 1}</div>\r\n                          <div className=\"font-medium\">{set.weight}</div>\r\n                          <div className=\"font-medium\">{set.reps}</div>\r\n                          <div>{set.volume.toFixed(1)}</div>\r\n                          <div className={`text-[9px] ${set.used ? 'text-green-600' : 'text-muted-foreground'}`}>\r\n                            {set.used ? '✓ Used' : 'Available'}\r\n                          </div>\r\n                        </div>\r\n                      ));\r\n                    })()}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Progression targets */}\r\n              {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets && (\r\n                <>\r\n                  <div className=\"text-xs font-medium text-primary/80 mb-1 flex items-center gap-1\">\r\n                    <Star className=\"h-3 w-3\" />\r\n                    <span>Progression Targets ({previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.progressionRate.toFixed(1)}% increase)</span>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-1 gap-2 text-xs\">\r\n                    {/* Option 1: Same weight, more reps */}\r\n                    <div className=\"bg-muted/80 p-2 rounded-md mb-1 hover:bg-muted cursor-pointer transition-colors\"\r\n                         onClick={() => {\r\n                           const target = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps;\r\n                           if (target) {\r\n                             setCurrentWeight(target.weight);\r\n                             setCurrentReps(target.reps);\r\n                           }\r\n                         }}>\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-medium text-primary\">Option 1: More Reps</span>\r\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary text-[9px] h-4\">\r\n                          {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.sets} set{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.sets !== 1 ? 's' : ''}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2 mt-1\">\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Weight: </span>\r\n                          <span>{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.weight}</span>\r\n                        </div>\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Target Reps: </span>\r\n                          <span className=\"font-medium text-primary\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.reps}</span>\r\n                          <span className=\"text-green-500 text-[10px] ml-1\">(+{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.additionalReps})</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-[10px] mt-1 text-muted-foreground\">\r\n                        Tap to apply these values\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Option 2: Same weight, same reps, more sets */}\r\n                    <div className=\"bg-muted/80 p-2 rounded-md mb-1 hover:bg-muted cursor-pointer transition-colors\"\r\n                         onClick={() => {\r\n                           const target = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets;\r\n                           if (target) {\r\n                             setCurrentWeight(target.weight);\r\n                             setCurrentReps(target.reps);\r\n                           }\r\n                         }}>\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-medium text-primary\">Option 2: More Sets</span>\r\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary text-[9px] h-4\">\r\n                          {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.sets} set{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.sets !== 1 ? 's' : ''}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2 mt-1\">\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Weight: </span>\r\n                          <span>{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.weight}</span>\r\n                        </div>\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Reps: </span>\r\n                          <span>{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.reps}</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex justify-between mt-1\">\r\n                        <div className=\"text-[10px] text-muted-foreground\">\r\n                          Tap to apply these values\r\n                        </div>\r\n                        <div className=\"text-green-500 text-[10px]\">\r\n                          (+{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.additionalSets} sets)\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Option 3: Balanced approach - same weight, moderate rep increase, moderate set increase */}\r\n                    <div className=\"bg-muted/80 p-2 rounded-md hover:bg-muted cursor-pointer transition-colors\"\r\n                         onClick={() => {\r\n                           const target = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression;\r\n                           if (target) {\r\n                             setCurrentWeight(target.weight);\r\n                             setCurrentReps(target.reps);\r\n                           }\r\n                         }}>\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-medium text-primary\">Option 3: Balanced</span>\r\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary text-[9px] h-4\">\r\n                          Recommended\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2 mt-1\">\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Weight: </span>\r\n                          <span className=\"font-medium text-primary\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression.weight}</span>\r\n                        </div>\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Reps: </span>\r\n                          <span className=\"font-medium text-primary\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression.reps}</span>\r\n                          <span className=\"text-green-500 text-[10px] ml-1\">(+{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression.additionalReps})</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex justify-between mt-1\">\r\n                        <div className=\"text-[10px] text-muted-foreground\">\r\n                          Tap to apply these values\r\n                        </div>\r\n                        <div className=\"text-green-500 text-[10px]\">                          {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets?.balancedProgression?.additionalSets > 0 ? \r\n                            `(+${previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets?.balancedProgression?.additionalSets} sets)` : \r\n                            ''}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"grid gap-4 py-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"weight\">Weight</Label>\r\n                <Input\r\n                  id=\"weight\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  value={currentWeight}\r\n                  onChange={(e) => setCurrentWeight(Number(e.target.value))}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"reps\">Reps</Label>\r\n                <Input\r\n                  id=\"reps\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  value={currentReps}\r\n                  onChange={(e) => setCurrentReps(Number(e.target.value))}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"space-y-2\">\r\n              <Label>Rating (How difficult was this set?)</Label>\r\n              <div className=\"flex justify-between pt-2\">\r\n                {[1, 2, 3, 4, 5].map((rating) => (\r\n                  <Button\r\n                    key={rating}\r\n                    type=\"button\"\r\n                    variant={currentRating === rating ? \"default\" : \"outline\"}\r\n                    size=\"sm\"\r\n                    onClick={() => setCurrentRating(rating)}\r\n                    className=\"px-3\"\r\n                  >\r\n                    {rating}\r\n                    {rating === 1 && \" - Easy\"}\r\n                    {rating === 3 && \" - Normal\"}\r\n                    {rating === 5 && \" - Hard\"}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setExerciseLogOpen(false)} disabled={isSaving}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleLogSubmit} disabled={isSaving}>\r\n              {isSaving ? (\r\n                <>\r\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                  </svg>\r\n                  Saving...\r\n                </>\r\n              ) : (\r\n                \"Save\"\r\n              )}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n      {/* Exercise Notes Dialog */}\r\n      <Dialog open={notesDialogOpen} onOpenChange={setNotesDialogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Exercise Notes</DialogTitle>\r\n            <DialogDescription>\r\n              Add notes for {currentExerciseIndex !== null ? activeWorkout.exercises[currentExerciseIndex]?.name : ''}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"py-4\">\r\n            <Textarea\r\n              placeholder=\"Add notes about this exercise (form, modifications, etc.)...\"\r\n              value={exerciseNotes}\r\n              onChange={(e) => setExerciseNotes(e.target.value)}\r\n              className=\"min-h-[150px]\"\r\n            />\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setNotesDialogOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleSaveExerciseNotes}>\r\n              Save Notes\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n      {/* Complete Workout Confirmation */}\r\n      <Dialog open={confirmCompleteOpen} onOpenChange={setConfirmCompleteOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Complete Workout?</DialogTitle>\r\n            <DialogDescription>\r\n              Are you sure you want to finish this workout? This action will save your progress.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"py-4\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <span>Progress:</span>\r\n              <Badge>{calculateOverallProgress()}% Complete</Badge>\r\n            </div>\r\n            \r\n            <Progress value={calculateOverallProgress()} />\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setConfirmCompleteOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleCompleteWorkout}>\r\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\r\n              Complete Workout\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default ActiveWorkoutPage;\r\n"],"names":["__iconNode","List","createLucideIcon","Star","Textarea","className","props","jsx","cn","ActiveWorkoutPage","activeWorkout","updateActiveWorkout","completeWorkout","addExerciseSet","useWorkoutTemplates","addWorkoutLog","getPreviousHighestVolumeWorkout","useWorkoutLogs","router","useRouter","notes","setNotes","useState","currentExerciseIndex","setCurrentExerciseIndex","exerciseLogOpen","setExerciseLogOpen","confirmCompleteOpen","setConfirmCompleteOpen","restTimerActive","setRestTimerActive","restStartTime","setRestStartTime","currentLogExercise","setCurrentLogExercise","exerciseNotes","setExerciseNotes","notesDialogOpen","setNotesDialogOpen","currentWeight","setCurrentWeight","currentReps","setCurrentReps","currentRating","setCurrentRating","isSaving","setIsSaving","previousHighestVolumeWorkouts","setPreviousHighestVolumeWorkouts","defaultRestBetweenSets","defaultRestBetweenExercises","useEffect","firstIncompleteIdx","ex","formatElapsedTime","startTime","diffMs","minutes","hours","mins","formatRestTime","now","elapsedSec","secs","startRestTimer","duration","toast","stopRestTimer","elapsedSeconds","handleStopRestTimer","calculateOverallProgress","totalSets","completedSets","handleSetComplete","exerciseIndex","exercise","rawPrevHighestVolume","typedPrevHighestVolume","_a","set","prev","newState","handleLogSubmit","currentSetsCompleted","updatedExercises","actualRestTime","workoutKey","prevWorkout","updatedSets","unusedSetIndex","err","nextIncompleteIdx","idx","handleSaveExerciseNotes","handleSaveWorkoutNotes","handleCompleteWorkout","result","handleAddExtraSet","interval","forceUpdate","DashboardLayout","jsxs","Button","ArrowLeft","Clock","Badge","CheckCircle","Card","CardContent","Progress","ScrollArea","isCompleted","isCurrent","Dumbbell","_","setIdx","isSetCompleted","Plus","Edit","e","Save","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","TrendingUp","sum","_c","_b","_d","_f","_e","_g","_i","_h","sets","_j","Fragment","_k","target","_l","_m","_n","_p","_q","_r","_s","_t","_u","_x","_A","_z","_y","_D","_C","_B","Label","Input","rating","DialogFooter","_E"],"mappings":"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","x_google_ignoreList":[0,1]}