{"version":3,"file":"WorkoutTemplateBuilderPage-Bu3DvFuI.js","sources":["../../node_modules/lucide-react/dist/esm/icons/search.js","../../src/components/ui/skeleton.tsx","../../src/components/ui/use-toast.ts","../../src/views/WorkoutTemplateBuilderPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"m21 21-4.34-4.34\", key: \"14j7rj\" }],\n  [\"circle\", { cx: \"11\", cy: \"11\", r: \"8\", key: \"4ej97u\" }]\n];\nconst Search = createLucideIcon(\"search\", __iconNode);\n\nexport { __iconNode, Search as default };\n//# sourceMappingURL=search.js.map\n","import { cn } from \"@/lib/utils\";\r\nimport React from \"react\";\r\n\r\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  className?: string;\r\n  shape?: \"rect\" | \"circle\" | \"rounded\";\r\n  pulse?: boolean;\r\n  variant?: \"default\" | \"subtle\";\r\n}\r\n\r\nexport function Skeleton({\r\n  className,\r\n  shape = \"rect\",\r\n  pulse = true,\r\n  variant = \"default\",\r\n  ...props\r\n}: SkeletonProps) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"animate-pulse\",\r\n        {\r\n          \"rounded-md\": shape === \"rect\",\r\n          \"rounded-full\": shape === \"circle\",\r\n          \"rounded-lg\": shape === \"rounded\",\r\n          \"bg-muted/70\": variant === \"default\",\r\n          \"bg-muted/30\": variant === \"subtle\",\r\n        },\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport function CardSkeleton() {\r\n  return (\r\n    <div className=\"rounded-lg border border-border/50 bg-card p-6 shadow-sm overflow-hidden\">\r\n      <div className=\"flex items-center justify-between mb-5\">\r\n        <Skeleton className=\"h-6 w-1/3\" />\r\n        <Skeleton className=\"h-10 w-10 rounded-full\" />\r\n      </div>\r\n      <div className=\"space-y-4\">\r\n        <Skeleton className=\"h-20 w-full\" />\r\n        <div className=\"flex gap-2\">\r\n          <Skeleton className=\"h-4 w-20\" />\r\n          <Skeleton className=\"h-4 w-20\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function StatCardSkeleton() {\r\n  return (\r\n    <div className=\"rounded-lg border border-border/30 bg-card/50 backdrop-blur-md p-6 shadow-sm overflow-hidden\">\r\n      <div className=\"flex justify-between items-center mb-3\">\r\n        <Skeleton className=\"h-4 w-24\" variant=\"subtle\" />\r\n        <Skeleton className=\"h-9 w-9 rounded-full\" />\r\n      </div>\r\n      <Skeleton className=\"h-8 w-16 mb-2\" />\r\n      <Skeleton className=\"h-3 w-32\" variant=\"subtle\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function DashboardSkeleton() {\r\n  return (\r\n    <div className=\"flex flex-col gap-8\">\r\n      <div>\r\n        <div className=\"mb-6\">\r\n          <Skeleton className=\"h-8 w-1/4 mb-2\" />\r\n          <Skeleton className=\"h-4 w-1/2\" variant=\"subtle\" />\r\n        </div>\r\n        <div className=\"grid gap-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-4\">\r\n          <StatCardSkeleton />\r\n          <StatCardSkeleton />\r\n          <StatCardSkeleton />\r\n          <StatCardSkeleton />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid gap-6 md:grid-cols-2\">\r\n        <CardSkeleton />\r\n        <CardSkeleton />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// Simplified toast hook\r\nimport { useState } from 'react';\r\n\r\ntype ToastProps = {\r\n  title: string;\r\n  description?: string;\r\n  variant?: 'default' | 'success' | 'destructive';\r\n};\r\n\r\nexport function useToast() {\r\n  const [toasts, setToasts] = useState<ToastProps[]>([]);\r\n\r\n  const toast = (props: ToastProps) => {\r\n    setToasts((prevToasts) => [...prevToasts, props]);\r\n    \r\n    // Simple implementation - just show an alert\r\n    alert(`${props.title}${props.description ? '\\n' + props.description : ''}`);\r\n    \r\n    // In a real implementation, you'd add the toast to a list and render it in the UI\r\n  };\r\n\r\n  return {\r\n    toast,\r\n    toasts\r\n  };\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DashboardLayout } from '@/components/DashboardLayout';\r\nimport { useExercisesStore } from '@/store/exercisesStore';\r\nimport { useWorkoutTemplateStore } from '@/store/workoutTemplateStore';\r\nimport { Exercise } from '@/types/Exercises';\r\nimport { WorkoutTemplate } from '@/types/Workout_Templates';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { Dialog, DialogContent, DialogTitle, DialogDescription, DialogHeader, DialogFooter } from \"@/components/ui/dialog\";\r\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { Card } from '@/components/ui/card';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Trash2, Plus, Save, Edit, X, Search as SearchIcon, PlayCircle } from 'lucide-react';\r\nimport { useToast } from \"@/components/ui/use-toast\";\r\nimport { useRouter } from \"@/lib/utils\";\r\n\r\n// Type for template exercise\r\ntype TemplateExercise = WorkoutTemplate['exercises'][0];\r\n\r\nconst WorkoutTemplateBuilderPage: React.FC = () => {\r\n  const { exercises, exerciseGroups, fetchExercises, isLoading: exercisesLoading } = useExercisesStore();\r\n  const { templates, fetchTemplates, saveTemplate, deleteTemplate, startWorkout, isLoading: templatesLoading } = useWorkoutTemplateStore();\r\n  const { toast } = useToast();\r\n  const router = useRouter();\r\n  \r\n  const [activeTab, setActiveTab] = useState<string>(\"build\");\r\n  \r\n  // State for exercise selection\r\n  const [selectedMuscleGroup, setSelectedMuscleGroup] = useState<string | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  \r\n  // State for the template being created/edited\r\n  const [templateName, setTemplateName] = useState('');\r\n  const [templateDescription, setTemplateDescription] = useState('');\r\n  const [selectedExercises, setSelectedExercises] = useState<TemplateExercise[]>([]);\r\n  \r\n  // State for dialogs and feedback\r\n  const [saveDialogOpen, setSaveDialogOpen] = useState(false);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [templateToDelete, setTemplateToDelete] = useState<WorkoutTemplate | null>(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [toastVisible, setToastVisible] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [toastType, setToastType] = useState<'success' | 'error'>('success');\r\n  \r\n  // State for editing existing template\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [templateToEdit, setTemplateToEdit] = useState<WorkoutTemplate | null>(null);\r\n\r\n  // Load data on component mount\r\n  useEffect(() => {\r\n    fetchExercises();\r\n    fetchTemplates();\r\n  }, [fetchExercises, fetchTemplates]);\r\n  \r\n  // When entering edit mode, populate form with template data\r\n  useEffect(() => {\r\n    if (templateToEdit && isEditMode) {\r\n      setTemplateName(templateToEdit.name);\r\n      setTemplateDescription(templateToEdit.description);\r\n      setSelectedExercises(templateToEdit.exercises);\r\n      setActiveTab(\"build\");\r\n    }\r\n  }, [templateToEdit, isEditMode]);\r\n  \r\n  // Filter exercises based on selected muscle group and search query\r\n  const filteredExercises = exercises.filter((exercise) => {\r\n    const matchesMuscleGroup = !selectedMuscleGroup || exercise.muscleGroup === selectedMuscleGroup;\r\n    const matchesQuery = !searchQuery || \r\n      exercise.exercise.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      exercise.muscleGroup.toLowerCase().includes(searchQuery.toLowerCase());\r\n    \r\n    return matchesMuscleGroup && matchesQuery;\r\n  });\r\n  \r\n  // Add exercise to template\r\n  const addExerciseToTemplate = (exercise: Exercise) => {\r\n    const exerciseToAdd: TemplateExercise = {\r\n      name: exercise.exercise,\r\n      muscleGroup: exercise.muscleGroup,\r\n      sets: 3, // Default values\r\n      reps: 10,\r\n      weight: 0,\r\n      rest: 60,\r\n      notes: '',\r\n      difficultyLevel: exercise.difficultyLevel,\r\n      equipmentRequired: exercise.equipmentRequired,\r\n      targetIntensity: String(exercise.targetIntensity),\r\n      primaryMuscleGroup: exercise.primaryMuscleGroup,\r\n      secondaryMuscleGroup: String(exercise.secondaryMuscleGroup || ''),\r\n      exerciseDuration: exercise.exerciseDuration,\r\n      recoveryTime: exercise.recoveryTime,\r\n      exerciseType: exercise.exerciseType,\r\n      caloriesBurned: String(exercise.caloriesBurned),\r\n      exerciseProgression: exercise.exerciseProgression,\r\n      injuryRiskLevel: exercise.injuryRiskLevel,\r\n      exerciseLink: exercise.exerciseLink,\r\n      imageLink: exercise.imageLink,\r\n      relativePath: exercise.relatedPath\r\n    };\r\n    \r\n    setSelectedExercises([...selectedExercises, exerciseToAdd]);\r\n    showToast(`${exercise.exercise} added to template`, 'success');\r\n  };\r\n  \r\n  // Remove exercise from template\r\n  const removeExerciseFromTemplate = (index: number) => {\r\n    const updatedExercises = [...selectedExercises];\r\n    updatedExercises.splice(index, 1);\r\n    setSelectedExercises(updatedExercises);\r\n  };\r\n  \r\n  // Update exercise details in template\r\n  const updateExerciseDetail = (index: number, field: string, value: string | number) => {\r\n    const updatedExercises = [...selectedExercises];\r\n    updatedExercises[index] = {\r\n      ...updatedExercises[index],\r\n      [field]: value\r\n    };\r\n    setSelectedExercises(updatedExercises);\r\n  };\r\n  \r\n  // Save workout template\r\n  const handleSaveWorkoutTemplate = async () => {\r\n    if (!templateName.trim()) {\r\n      showToast('Please enter a template name', 'error');\r\n      return;\r\n    }\r\n    \r\n    if (selectedExercises.length === 0) {\r\n      showToast('Please add at least one exercise to the template', 'error');\r\n      return;\r\n    }\r\n    \r\n    setIsSaving(true);\r\n    \r\n    const newTemplate: WorkoutTemplate = {\r\n      name: templateName,\r\n      description: templateDescription,\r\n      exercises: selectedExercises,\r\n      createdAt: isEditMode && templateToEdit ? templateToEdit.createdAt : new Date().toISOString(),\r\n      lastUsed: isEditMode && templateToEdit?.lastUsed ? templateToEdit.lastUsed : ''\r\n    };\r\n    \r\n    try {\r\n      const result = await saveTemplate(newTemplate);\r\n      if (result.success) {\r\n        showToast(`Workout template ${isEditMode ? 'updated' : 'saved'} successfully`, 'success');\r\n        \r\n        // Reset form after successful save\r\n        setTemplateName('');\r\n        setTemplateDescription('');\r\n        setSelectedExercises([]);\r\n        setSaveDialogOpen(false);\r\n        setIsEditMode(false);\r\n        setTemplateToEdit(null);\r\n        \r\n        // Switch to view tab if in edit mode\r\n        if (isEditMode) {\r\n          setActiveTab('view');\r\n        }\r\n      } else {\r\n        showToast(`Error saving template: ${result.error}`, 'error');\r\n      }\r\n    } catch (error) {\r\n      showToast(`Error: ${(error as Error).message}`, 'error');\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n  \r\n  // Delete workout template\r\n  const handleDeleteTemplate = async () => {\r\n    if (!templateToDelete) return;\r\n    \r\n    setIsDeleting(true);\r\n    \r\n    try {\r\n      const result = await deleteTemplate(templateToDelete.name);\r\n      if (result.success) {\r\n        showToast(`Template \"${templateToDelete.name}\" deleted successfully`, 'success');\r\n        setDeleteDialogOpen(false);\r\n        setTemplateToDelete(null);\r\n      } else {\r\n        showToast(`Error deleting template: ${result.error}`, 'error');\r\n      }\r\n    } catch (error) {\r\n      showToast(`Error: ${(error as Error).message}`, 'error');\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  };\r\n  \r\n  // Handle edit template click\r\n  const handleEditTemplate = (template: WorkoutTemplate) => {\r\n    setTemplateToEdit(template);\r\n    setIsEditMode(true);\r\n  };\r\n  \r\n  // Reset form for new template\r\n  const handleNewTemplate = () => {\r\n    setTemplateName('');\r\n    setTemplateDescription('');\r\n    setSelectedExercises([]);\r\n    setIsEditMode(false);\r\n    setTemplateToEdit(null);\r\n    setActiveTab('build');\r\n  };\r\n  \r\n  // Show toast notification\r\n  const showToast = (message: string, type: 'success' | 'error' = 'success') => {\r\n    setToastMessage(message);\r\n    setToastType(type);\r\n    setToastVisible(true);\r\n    setTimeout(() => {\r\n      setToastVisible(false);\r\n    }, 3000);\r\n  };\r\n  \r\n  // Format date for display\r\n  const formatDate = (dateString: string) => {\r\n    if (!dateString) return 'N/A';\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto p-4\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-2xl font-bold\">Workout Templates</h1>\r\n        </div>\r\n        \r\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-2\">\r\n            <TabsTrigger value=\"build\">Build Template</TabsTrigger>\r\n            <TabsTrigger value=\"view\">View Templates</TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"build\" className=\"mt-6\">\r\n            <div className=\"mb-6\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                <div>\r\n                  <Label htmlFor=\"template-name\">Template Name</Label>\r\n                  <Input\r\n                    id=\"template-name\"\r\n                    placeholder=\"My Workout Template\"\r\n                    value={templateName}\r\n                    onChange={(e) => setTemplateName(e.target.value)}\r\n                    className=\"mb-2\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"template-description\">Description (Optional)</Label>\r\n                  <Input\r\n                    id=\"template-description\"\r\n                    placeholder=\"Description of your workout template...\"\r\n                    value={templateDescription}\r\n                    onChange={(e) => setTemplateDescription(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex flex-wrap gap-4\">\r\n                <div className=\"flex-1 min-w-[200px]\">\r\n                  <Label htmlFor=\"muscle-group\">Filter by Muscle Group</Label>                  <Select \r\n                    value={selectedMuscleGroup || 'all'} \r\n                    onValueChange={(value) => setSelectedMuscleGroup(value === 'all' ? null : value)}\r\n                  >\r\n                    <SelectTrigger id=\"muscle-group\">\r\n                      <SelectValue placeholder=\"All Muscle Groups\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">All Muscle Groups</SelectItem>\r\n                      {exerciseGroups.map((group) => (\r\n                        <SelectItem key={group.muscleGroup} value={group.muscleGroup}>\r\n                          {group.muscleGroup}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                \r\n                <div className=\"flex-1 min-w-[200px]\">\r\n                  <Label htmlFor=\"search\">Search Exercises</Label>\r\n                  <div className=\"relative\">\r\n                    <SearchIcon className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n                    <Input\r\n                      id=\"search\"\r\n                      type=\"text\"\r\n                      placeholder=\"Search by name...\"\r\n                      className=\"pl-9\"\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 lg:grid-cols-[1fr_1fr] gap-6\">\r\n              <Card className=\"p-4\">\r\n                <h2 className=\"text-xl font-semibold mb-4\">Exercise Library</h2>\r\n                \r\n                {exercisesLoading ? (\r\n                  <div className=\"space-y-2\">\r\n                    {Array(5).fill(0).map((_, i) => (\r\n                      <Skeleton key={i} className=\"h-16 w-full\" />\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <ScrollArea className=\"h-[500px]\">\r\n                    <Table>\r\n                      <TableHeader>\r\n                        <TableRow>\r\n                          <TableHead>Action</TableHead>\r\n                          <TableHead>Exercise</TableHead>\r\n                          <TableHead>Muscle Group</TableHead>\r\n                        </TableRow>\r\n                      </TableHeader>\r\n                      <TableBody>\r\n                        {filteredExercises.length > 0 ? (\r\n                          filteredExercises.map((exercise, index) => (\r\n                            <TableRow key={`${exercise.exercise}-${index}`}>\r\n                               <TableCell>\r\n                                <Button\r\n                                  size=\"sm\"\r\n                                  variant=\"ghost\"\r\n                                  onClick={() => addExerciseToTemplate(exercise)}>\r\n                                  <Plus className=\"h-4 w-4\" />\r\n                                </Button>\r\n                              </TableCell>\r\n                              <TableCell>{exercise.exercise}</TableCell>\r\n                              <TableCell>{exercise.muscleGroup}</TableCell>\r\n                            </TableRow>\r\n                          ))\r\n                        ) : (\r\n                          <TableRow>\r\n                            <TableCell colSpan={3} className=\"text-center py-4\">\r\n                              No exercises found\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </ScrollArea>\r\n                )}\r\n              </Card>\r\n              \r\n              <Card className=\"p-4\">\r\n                <h2 className=\"text-xl font-semibold mb-4\">Selected Exercises</h2>\r\n                <ScrollArea className=\"h-[400px] mb-4\">\r\n                  {selectedExercises.length > 0 ? (\r\n                    <Table>\r\n                      <TableHeader>\r\n                        <TableRow>\r\n                          <TableHead>Exercise</TableHead>\r\n                          <TableHead>Sets</TableHead>\r\n                          <TableHead>Reps</TableHead>\r\n                          <TableHead>Rest (s)</TableHead>\r\n                          <TableHead>Action</TableHead>\r\n                        </TableRow>\r\n                      </TableHeader>\r\n                      <TableBody>\r\n                        {selectedExercises.map((exercise, index) => (\r\n                          <TableRow key={index}>\r\n                            <TableCell>{exercise.name}</TableCell>\r\n                            <TableCell>\r\n                              <Input\r\n                                type=\"number\"\r\n                                value={exercise.sets}\r\n                                min={1}\r\n                                className=\"w-16\"\r\n                                onChange={(e) => updateExerciseDetail(index, 'sets', parseInt(e.target.value) || 1)}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Input\r\n                                type=\"number\"\r\n                                value={exercise.reps}\r\n                                min={1}\r\n                                className=\"w-16\"\r\n                                onChange={(e) => updateExerciseDetail(index, 'reps', parseInt(e.target.value) || 1)}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Input\r\n                                type=\"number\"\r\n                                value={exercise.rest}\r\n                                min={0}\r\n                                className=\"w-16\"\r\n                                onChange={(e) => updateExerciseDetail(index, 'rest', parseInt(e.target.value) || 0)}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Button\r\n                                size=\"sm\"\r\n                                variant=\"ghost\"\r\n                                onClick={() => removeExerciseFromTemplate(index)}\r\n                              >\r\n                                <Trash2 className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  ) : (\r\n                    <div className=\"text-center py-10 text-muted-foreground\">\r\n                      No exercises added yet. Add some from the library.\r\n                    </div>\r\n                  )}\r\n                </ScrollArea>\r\n                \r\n                <div className=\"flex justify-end\">\r\n                  <Button\r\n                    variant=\"default\"\r\n                    onClick={() => setSaveDialogOpen(true)}\r\n                    disabled={selectedExercises.length === 0 || !templateName.trim()}\r\n                  >\r\n                    <Save className=\"mr-2 h-4 w-4\" /> {isEditMode ? 'Update' : 'Save'} Template\r\n                  </Button>\r\n                </div>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"view\" className=\"mt-6\">\r\n            <div className=\"mb-4 flex justify-end\">\r\n              <Button onClick={handleNewTemplate}>\r\n                <Plus className=\"mr-2 h-4 w-4\" /> New Template\r\n              </Button>\r\n            </div>\r\n            \r\n            {templatesLoading ? (\r\n              <div className=\"space-y-4\">\r\n                {Array(3).fill(0).map((_, i) => (\r\n                  <Skeleton key={i} className=\"h-24 w-full\" />\r\n                ))}\r\n              </div>\r\n            ) : templates.length === 0 ? (\r\n              <Card className=\"p-8 text-center\">\r\n                <h3 className=\"text-lg font-medium mb-2\">No Templates Found</h3>\r\n                <p className=\"text-muted-foreground mb-4\">Create your first workout template to get started.</p>\r\n                <Button onClick={handleNewTemplate}>\r\n                  <Plus className=\"mr-2 h-4 w-4\" /> Create New Template\r\n                </Button>\r\n              </Card>\r\n            ) : (\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                {templates.map((template) => (\r\n                  <Card key={template.name} className=\"p-4\">\r\n                    <div className=\"flex justify-between items-start mb-2\">\r\n                      <div>\r\n                        <h3 className=\"text-lg font-medium\">{template.name}</h3>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          {template.description || 'No description'}\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"flex space-x-2\">\r\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => handleEditTemplate(template)}>\r\n                          <Edit className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\" \r\n                          onClick={() => {\r\n                            setTemplateToDelete(template);\r\n                            setDeleteDialogOpen(true);\r\n                          }}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-2 gap-2 text-sm mb-4\">\r\n                      <div>\r\n                        <span className=\"text-muted-foreground\">Exercises:</span>{' '}\r\n                        <span className=\"font-medium\">{template.exercises.length}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-muted-foreground\">Created:</span>{' '}\r\n                        <span className=\"font-medium\">{formatDate(template.createdAt)}</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {template.exercises.length > 0 && (\r\n                      <div className=\"mb-4\">\r\n                        <h4 className=\"text-sm font-medium mb-2\">Exercises:</h4>\r\n                        <ScrollArea className=\"h-32\">\r\n                          <ul className=\"space-y-1\">\r\n                            {template.exercises.slice(0, 5).map((exercise, idx) => (\r\n                              <li key={idx} className=\"text-sm\">\r\n                                {exercise.name} - {exercise.sets}×{exercise.reps}\r\n                              </li>\r\n                            ))}\r\n                            {template.exercises.length > 5 && (\r\n                              <li className=\"text-sm text-muted-foreground\">\r\n                                +{template.exercises.length - 5} more\r\n                              </li>\r\n                            )}\r\n                          </ul>\r\n                        </ScrollArea>\r\n                      </div>\r\n                    )}\r\n                      <div className=\"flex justify-end\">\r\n                      <Button \r\n                        size=\"sm\"                        onClick={async () => {\r\n                          const result = await startWorkout(template.name);\r\n                          if (result.success) {\r\n                            showToast(`Workout started with template \"${template.name}\"`, 'success');\r\n                            // Redirect to the workout page using our router\r\n                            router.push('/workout');\r\n                          } else {\r\n                            showToast(`Error starting workout: ${result.error}`, 'error');\r\n                          }\r\n                        }}\r\n                      >\r\n                        <PlayCircle className=\"mr-2 h-4 w-4\" /> Start Workout\r\n                      </Button>\r\n                    </div>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </TabsContent>\r\n        </Tabs>\r\n        \r\n        {/* Save Template Dialog */}\r\n        <Dialog open={saveDialogOpen} onOpenChange={setSaveDialogOpen}>\r\n          <DialogContent>\r\n            <DialogHeader>\r\n              <DialogTitle>{isEditMode ? 'Update' : 'Save'} Workout Template</DialogTitle>\r\n              <DialogDescription>\r\n                Are you sure you want to {isEditMode ? 'update' : 'save'} this workout template?\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            <div>\r\n              <p><strong>Template Name:</strong> {templateName}</p>\r\n              <p><strong>Exercises:</strong> {selectedExercises.length}</p>\r\n            </div>\r\n            <DialogFooter>\r\n              <Button variant=\"outline\" onClick={() => setSaveDialogOpen(false)}>\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleSaveWorkoutTemplate} disabled={isSaving}>\r\n                {isSaving ? \"Saving...\" : (isEditMode ? \"Update\" : \"Save\") + \" Template\"}\r\n              </Button>\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n        \r\n        {/* Delete Template Dialog */}\r\n        <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n          <DialogContent>\r\n            <DialogHeader>\r\n              <DialogTitle>Delete Workout Template</DialogTitle>\r\n              <DialogDescription>\r\n                Are you sure you want to delete this template? This action cannot be undone.\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            {templateToDelete && (\r\n              <div>\r\n                <p><strong>Template Name:</strong> {templateToDelete.name}</p>\r\n                <p><strong>Exercises:</strong> {templateToDelete.exercises.length}</p>\r\n              </div>\r\n            )}\r\n            <DialogFooter>\r\n              <Button variant=\"outline\" onClick={() => setDeleteDialogOpen(false)}>\r\n                Cancel\r\n              </Button>\r\n              <Button variant=\"destructive\" onClick={handleDeleteTemplate} disabled={isDeleting}>\r\n                {isDeleting ? \"Deleting...\" : \"Delete Template\"}\r\n              </Button>\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n        \r\n        {/* Toast Notification */}\r\n        {toastVisible && (\r\n          <div className={`fixed bottom-4 right-4 z-50 bg-background border shadow-lg rounded-md px-4 py-2 flex items-center gap-2 ${\r\n            toastType === 'error' ? 'border-destructive text-destructive' : 'border-primary text-primary'\r\n          }`}>\r\n            {toastMessage}\r\n            <button onClick={() => setToastVisible(false)} className=\"ml-2\">\r\n              <X className=\"h-4 w-4\" />\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default WorkoutTemplateBuilderPage;"],"names":["__iconNode","Search","createLucideIcon","Skeleton","className","shape","pulse","variant","props","jsx","cn","useToast","toasts","setToasts","useState","prevToasts","WorkoutTemplateBuilderPage","exercises","exerciseGroups","fetchExercises","exercisesLoading","useExercisesStore","templates","fetchTemplates","saveTemplate","deleteTemplate","startWorkout","templatesLoading","useWorkoutTemplateStore","router","useRouter","activeTab","setActiveTab","selectedMuscleGroup","setSelectedMuscleGroup","searchQuery","setSearchQuery","templateName","setTemplateName","templateDescription","setTemplateDescription","selectedExercises","setSelectedExercises","saveDialogOpen","setSaveDialogOpen","deleteDialogOpen","setDeleteDialogOpen","templateToDelete","setTemplateToDelete","isSaving","setIsSaving","isDeleting","setIsDeleting","toastVisible","setToastVisible","toastMessage","setToastMessage","toastType","setToastType","isEditMode","setIsEditMode","templateToEdit","setTemplateToEdit","useEffect","filteredExercises","exercise","matchesMuscleGroup","matchesQuery","addExerciseToTemplate","exerciseToAdd","showToast","removeExerciseFromTemplate","index","updatedExercises","updateExerciseDetail","field","value","handleSaveWorkoutTemplate","newTemplate","result","error","handleDeleteTemplate","handleEditTemplate","template","handleNewTemplate","message","type","formatDate","dateString","DashboardLayout","jsxs","Tabs","TabsList","TabsTrigger","TabsContent","Label","Input","e","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","group","SearchIcon","Card","_","i","ScrollArea","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","Button","Plus","Trash2","Save","Edit","idx","PlayCircle","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","DialogFooter","X"],"mappings":"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","x_google_ignoreList":[0]}