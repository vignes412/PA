{"version":3,"file":"ActiveWorkoutPage-DnBtdfB_.js","sources":["../../node_modules/lucide-react/dist/esm/icons/arrow-left.js","../../src/components/ui/textarea.tsx","../../src/components/ui/use-toast.ts","../../src/views/ActiveWorkoutPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"m12 19-7-7 7-7\", key: \"1l729n\" }],\n  [\"path\", { d: \"M19 12H5\", key: \"x3x0zl\" }]\n];\nconst ArrowLeft = createLucideIcon(\"arrow-left\", __iconNode);\n\nexport { __iconNode, ArrowLeft as default };\n//# sourceMappingURL=arrow-left.js.map\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","// Simplified toast hook\r\nimport { useState } from 'react';\r\n\r\ntype ToastProps = {\r\n  title: string;\r\n  description?: string;\r\n  variant?: 'default' | 'success' | 'destructive';\r\n};\r\n\r\nexport function useToast() {\r\n  const [toasts, setToasts] = useState<ToastProps[]>([]);\r\n\r\n  const toast = (props: ToastProps) => {\r\n    setToasts((prevToasts) => [...prevToasts, props]);\r\n    \r\n    // Simple implementation - just show an alert\r\n    alert(`${props.title}${props.description ? '\\n' + props.description : ''}`);\r\n    \r\n    // In a real implementation, you'd add the toast to a list and render it in the UI\r\n  };\r\n\r\n  return {\r\n    toast,\r\n    toasts\r\n  };\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DashboardLayout } from '@/components/DashboardLayout';\r\nimport { useWorkoutTemplateStore } from '@/store/workoutTemplateStore';\r\nimport { useWorkoutLogStore } from '@/store/workoutLogStore';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Dialog, DialogContent, DialogTitle, DialogDescription, DialogFooter, DialogHeader } from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { useToast } from \"@/components/ui/use-toast\";\r\nimport { Dumbbell, Clock, CheckCircle, ArrowLeft, Save, Edit, Plus, Trash2, PlayCircle, Star } from \"lucide-react\";\r\nimport { useRouter } from '@/lib/utils';\r\n\r\nconst ActiveWorkoutPage: React.FC = () => {\r\n  const { activeWorkout, updateExerciseProgress, updateActiveWorkout, completeWorkout, addExerciseSet } = useWorkoutTemplateStore();\r\n  const { addWorkoutLog } = useWorkoutLogStore();\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  \r\n  // Set up state\r\n  const [notes, setNotes] = useState(\"\");\r\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState<number | null>(null);\r\n  const [exerciseLogOpen, setExerciseLogOpen] = useState(false);\r\n  const [confirmCompleteOpen, setConfirmCompleteOpen] = useState(false);\r\n  const [restTimerActive, setRestTimerActive] = useState(false);\r\n  const [restStartTime, setRestStartTime] = useState<number | null>(null);\r\n  const [currentLogExercise, setCurrentLogExercise] = useState<{\r\n    name: string;\r\n    muscleGroup: string;\r\n    sets: number;\r\n    reps: number;\r\n    weight: number;\r\n    setsCompleted?: number;\r\n    index: number;\r\n    rating?: number;\r\n  } | null>(null);\r\n  const [exerciseNotes, setExerciseNotes] = useState(\"\");\r\n  const [notesDialogOpen, setNotesDialogOpen] = useState(false);\r\n  const [currentWeight, setCurrentWeight] = useState<number>(0);\r\n  const [currentReps, setCurrentReps] = useState<number>(0);\r\n  const [currentRating, setCurrentRating] = useState<number>(3); // Default rating (1-5)\r\n  \r\n  // Set up defaults\r\n  const defaultRestBetweenSets = 60; // seconds\r\n  const defaultRestBetweenExercises = 90; // seconds\r\n    // Check if we have an active workout, if not redirect to dashboard\r\n  useEffect(() => {\r\n    if (!activeWorkout) {\r\n      router.push('/');\r\n    } else {\r\n      // Initialize notes from active workout\r\n      setNotes(activeWorkout.notes || \"\");\r\n      \r\n      // Find the first incomplete exercise\r\n      const firstIncompleteIdx = activeWorkout.exercises.findIndex(\r\n        ex => (ex.setsCompleted || 0) < ex.sets\r\n      );\r\n      \r\n      if (firstIncompleteIdx !== -1) {\r\n        setCurrentExerciseIndex(firstIncompleteIdx);\r\n      }\r\n    }\r\n  }, [activeWorkout, router]);\r\n  \r\n  // Update form values when currentLogExercise changes\r\n  useEffect(() => {\r\n    if (currentLogExercise) {\r\n      setCurrentWeight(currentLogExercise.weight || 0);\r\n      setCurrentReps(currentLogExercise.reps || 0);\r\n    }\r\n  }, [currentLogExercise]);\r\n  \r\n  // Format time since workout started\r\n  const formatElapsedTime = () => {\r\n    if (!activeWorkout) return \"00:00\";\r\n    \r\n    const startTime = new Date(activeWorkout.startTime);\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - startTime.getTime();\r\n    \r\n    const minutes = Math.floor((diffMs / 1000) / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    \r\n    return `${hours > 0 ? `${hours}h ` : ''}${mins < 10 ? '0' : ''}${mins}m`;\r\n  };\r\n  \r\n  // Format rest timer\r\n  const formatRestTime = () => {\r\n    if (!restTimerActive || !restStartTime) return \"00:00\";\r\n    \r\n    const now = Date.now();\r\n    const elapsedSec = Math.floor((now - restStartTime) / 1000);\r\n    \r\n    const mins = Math.floor(elapsedSec / 60);\r\n    const secs = elapsedSec % 60;\r\n    \r\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\r\n  };\r\n  \r\n  // Start rest timer\r\n  const startRestTimer = (duration = defaultRestBetweenSets) => {\r\n    setRestStartTime(Date.now());\r\n    setRestTimerActive(true);\r\n    \r\n    toast({\r\n      title: \"Rest Timer Started\",\r\n      description: `${duration} seconds rest timer started`,\r\n    });\r\n  };\r\n    // Stop rest timer\r\n  const stopRestTimer = () => {\r\n    setRestTimerActive(false);\r\n    setRestStartTime(null);\r\n  };\r\n  \r\n  // Function to manually stop the rest timer (can be called from UI)\r\n  const handleStopRestTimer = () => {\r\n    stopRestTimer();\r\n    toast({\r\n      title: \"Rest Timer Stopped\",\r\n      description: \"Rest timer has been stopped\",\r\n    });\r\n  };\r\n  \r\n  // Calculate overall progress\r\n  const calculateOverallProgress = () => {\r\n    if (!activeWorkout || !activeWorkout.exercises) return 0;\r\n    \r\n    let totalSets = 0;\r\n    let completedSets = 0;\r\n    \r\n    activeWorkout.exercises.forEach(ex => {\r\n      totalSets += ex.sets;\r\n      completedSets += ex.setsCompleted || 0;\r\n    });\r\n    \r\n    return totalSets === 0 ? 0 : Math.round((completedSets / totalSets) * 100);\r\n  };\r\n    // Handle set complete\r\n  const handleSetComplete = (exerciseIndex: number) => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const exercise = activeWorkout.exercises[exerciseIndex];\r\n    const currentSetsCompleted = exercise.setsCompleted || 0;\r\n    \r\n    if (currentSetsCompleted < exercise.sets) {\r\n      // Open the exercise log dialog\r\n      setCurrentExerciseIndex(exerciseIndex);\r\n      setCurrentWeight(exercise.weight || 0);\r\n      setCurrentReps(exercise.reps || 0);\r\n      setCurrentRating(3); // Default rating\r\n      setCurrentLogExercise({\r\n        ...exercise,\r\n        index: exerciseIndex\r\n      });\r\n      setExerciseLogOpen(true);\r\n    }\r\n  };\r\n  \r\n  // Handle log submission\r\n  const handleLogSubmit = async () => {\r\n    if (!activeWorkout || currentExerciseIndex === null || !currentLogExercise) return;\r\n    \r\n    const exercise = activeWorkout.exercises[currentExerciseIndex];\r\n    const currentSetsCompleted = exercise.setsCompleted || 0;\r\n    \r\n    // Update the exercise progress in the active workout\r\n    if (currentSetsCompleted < exercise.sets) {\r\n      updateExerciseProgress(currentExerciseIndex, currentSetsCompleted + 1);\r\n      \r\n      // Save to workout log sheet\r\n      try {\r\n        await addWorkoutLog({\r\n          date: new Date().toISOString(),\r\n          muscleGroup: exercise.muscleGroup,\r\n          exercise: exercise.name,\r\n          reps: currentReps,\r\n          weight: currentWeight,\r\n          rating: currentRating,\r\n          restTime: exercise.rest || defaultRestBetweenSets\r\n        });\r\n        \r\n        // Update the exercise with the new weight/reps if they were changed\r\n        if (currentWeight !== exercise.weight || currentReps !== exercise.reps) {\r\n          const updatedExercises = [...activeWorkout.exercises];\r\n          updatedExercises[currentExerciseIndex] = {\r\n            ...updatedExercises[currentExerciseIndex],\r\n            weight: currentWeight,\r\n            reps: currentReps\r\n          };\r\n          updateActiveWorkout({ exercises: updatedExercises });\r\n        }\r\n        \r\n        toast({\r\n          title: \"Set Completed\",\r\n          description: `${exercise.name} set ${currentSetsCompleted + 1}/${exercise.sets} logged`,\r\n          variant: \"success\"\r\n        });\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error\",\r\n          description: \"Failed to log workout set. Will try again when online.\",\r\n          variant: \"destructive\"\r\n        });\r\n        console.error(\"Error logging workout set:\", error);\r\n      }\r\n      \r\n      // Close the dialog\r\n      setExerciseLogOpen(false);\r\n      \r\n      // Start the rest timer\r\n      startRestTimer(exercise.rest || defaultRestBetweenSets);\r\n      \r\n      // Check if all sets are complete\r\n      if (currentSetsCompleted + 1 >= exercise.sets) {\r\n        // Find next incomplete exercise\r\n        const nextIncompleteIdx = activeWorkout.exercises.findIndex(\r\n          (ex, idx) => idx > currentExerciseIndex && (ex.setsCompleted || 0) < ex.sets\r\n        );\r\n        \r\n        if (nextIncompleteIdx !== -1) {\r\n          // Start longer rest between exercises\r\n          startRestTimer(defaultRestBetweenExercises);\r\n          // Set the next exercise as current\r\n          setCurrentExerciseIndex(nextIncompleteIdx);\r\n        } else {\r\n          // All exercises complete\r\n          toast({\r\n            title: \"Workout Complete\",\r\n            description: \"All exercises have been completed! You can finish your workout.\",\r\n            variant: \"success\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Handle exercise notes save\r\n  const handleSaveExerciseNotes = () => {\r\n    if (!activeWorkout || currentExerciseIndex === null) return;\r\n    \r\n    const updatedExercises = [...activeWorkout.exercises];\r\n    updatedExercises[currentExerciseIndex] = {\r\n      ...updatedExercises[currentExerciseIndex],\r\n      notes: exerciseNotes\r\n    };\r\n    \r\n    updateActiveWorkout({ exercises: updatedExercises });\r\n    setNotesDialogOpen(false);\r\n    \r\n    toast({\r\n      title: \"Notes Saved\",\r\n      description: \"Exercise notes have been updated.\",\r\n    });\r\n  };\r\n  \r\n  // Handle workout notes save\r\n  const handleSaveWorkoutNotes = () => {\r\n    if (!activeWorkout) return;\r\n    \r\n    updateActiveWorkout({ notes });\r\n    \r\n    toast({\r\n      title: \"Notes Saved\",\r\n      description: \"Workout notes have been updated.\",\r\n    });\r\n  };\r\n  \r\n  // Handle workout complete\r\n  const handleCompleteWorkout = async () => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const result = await completeWorkout();\r\n    \r\n    if (result.success) {\r\n      toast({\r\n        title: \"Workout Completed\",\r\n        description: \"Your workout has been saved.\",\r\n        variant: \"success\"\r\n      });\r\n      \r\n      router.push('/');\r\n    } else {\r\n      toast({\r\n        title: \"Error\",\r\n        description: result.error || \"Failed to complete workout\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Handle add extra set\r\n  const handleAddExtraSet = (exerciseIndex: number) => {\r\n    if (!activeWorkout) return;\r\n    \r\n    addExerciseSet(exerciseIndex);\r\n    \r\n    toast({\r\n      title: \"Set Added\",\r\n      description: `Added an extra set to ${activeWorkout.exercises[exerciseIndex].name}`,\r\n    });\r\n  };\r\n  \r\n  // Update UI when timer is active\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | null = null;\r\n    \r\n    if (restTimerActive) {\r\n      interval = setInterval(() => {\r\n        // Force re-render to update timer display\r\n      }, 1000);\r\n    }\r\n    \r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [restTimerActive]);\r\n  \r\n  if (!activeWorkout) {\r\n    return <div className=\"flex justify-center items-center h-full\">Loading workout...</div>;\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto p-4\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <div className=\"flex items-center\">\r\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => router.push('/')}>\r\n              <ArrowLeft className=\"h-5 w-5\" />\r\n            </Button>\r\n            <h1 className=\"text-2xl font-bold ml-2\">Active Workout</h1>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"flex items-center text-sm\">\r\n              <Clock className=\"h-4 w-4 mr-1 text-muted-foreground\" />\r\n              <span>{formatElapsedTime()}</span>\r\n            </div>            \r\n            {restTimerActive && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant=\"outline\" className=\"bg-primary/10 text-primary flex items-center gap-1\">\r\n                  <Clock className=\"h-3 w-3\" />\r\n                  Rest: {formatRestTime()}\r\n                </Badge>\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  className=\"h-6 px-2 text-xs\"\r\n                  onClick={handleStopRestTimer}\r\n                >\r\n                  Stop\r\n                </Button>\r\n              </div>\r\n            )}\r\n            \r\n            <Button\r\n              variant=\"default\"\r\n              size=\"sm\"\r\n              onClick={() => setConfirmCompleteOpen(true)}\r\n            >\r\n              <CheckCircle className=\"h-4 w-4 mr-2\" /> \r\n              Finish Workout\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Workout Info */}\r\n        <Card className=\"mb-6\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex flex-col md:flex-row justify-between gap-4 mb-4\">\r\n              <div>\r\n                <h2 className=\"text-xl font-semibold\">{activeWorkout.templateName}</h2>\r\n                <p className=\"text-muted-foreground\">{activeWorkout.description}</p>\r\n              </div>\r\n              \r\n              <div className=\"flex flex-col\">\r\n                <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\r\n                  <span>Overall Progress:</span>\r\n                  <span className=\"font-medium\">{calculateOverallProgress()}%</span>\r\n                </div>\r\n                <Progress value={calculateOverallProgress()} className=\"w-40\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <div className=\"md:col-span-2\">\r\n            <div className=\"mb-4 flex justify-between items-center\">\r\n              <h2 className=\"text-lg font-semibold\">Exercises</h2>\r\n            </div>\r\n            \r\n            <ScrollArea className=\"h-[calc(100vh-300px)]\">\r\n              <div className=\"space-y-4 pr-4\">\r\n                {activeWorkout.exercises.map((exercise, idx) => {\r\n                  const isCompleted = (exercise.setsCompleted || 0) >= exercise.sets;\r\n                  const isCurrent = idx === currentExerciseIndex;\r\n                  \r\n                  return (\r\n                    <Card \r\n                      key={idx} \r\n                      className={`${isCurrent ? 'border-primary/50 bg-primary/5' : isCompleted ? 'border-muted bg-muted/20' : ''}`}\r\n                    >\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex justify-between items-start mb-3\">\r\n                          <div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <Dumbbell className={`h-4 w-4 ${isCurrent ? 'text-primary' : 'text-muted-foreground'}`} />\r\n                              <h3 className=\"font-medium text-lg\">\r\n                                {exercise.name}\r\n                              </h3>\r\n                            </div>\r\n                            <div className=\"text-sm text-muted-foreground\">\r\n                              {exercise.sets} sets × {exercise.reps} reps\r\n                              {exercise.weight > 0 && ` @ ${exercise.weight}`}\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          <Badge>\r\n                            {(exercise.setsCompleted || 0)}/{exercise.sets} Sets\r\n                          </Badge>\r\n                        </div>\r\n                        \r\n                        <Progress \r\n                          value={((exercise.setsCompleted || 0) / exercise.sets) * 100} \r\n                          className=\"h-1.5 mb-4\"\r\n                        />\r\n                        \r\n                        <div className=\"flex flex-wrap gap-2\">\r\n                          {Array.from({ length: exercise.sets }).map((_, setIdx) => {\r\n                            const isSetCompleted = (exercise.setsCompleted || 0) > setIdx;\r\n                            \r\n                            return (\r\n                              <Button\r\n                                key={setIdx}\r\n                                size=\"sm\"\r\n                                variant={isSetCompleted ? \"default\" : \"outline\"}\r\n                                className={isSetCompleted ? \"opacity-70\" : \"\"}\r\n                                onClick={() => !isSetCompleted && handleSetComplete(idx)}\r\n                                disabled={isSetCompleted}\r\n                              >\r\n                                {isSetCompleted ? (\r\n                                  <CheckCircle className=\"h-3.5 w-3.5 mr-1\" />\r\n                                ) : null}\r\n                                Set {setIdx + 1}\r\n                              </Button>\r\n                            );\r\n                          })}\r\n                          \r\n                          {/* Button to add an extra set if all sets are completed */}\r\n                          {isCompleted && (\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"secondary\"\r\n                              onClick={() => handleAddExtraSet(idx)}\r\n                            >\r\n                              <Plus className=\"h-3.5 w-3.5 mr-1\" />\r\n                              Extra Set\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        {exercise.notes ? (\r\n                          <div className=\"mt-3 text-sm p-2 bg-muted rounded-md\">\r\n                            <span className=\"font-medium\">Notes:</span> {exercise.notes}\r\n                          </div>\r\n                        ) : (\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"ghost\"\r\n                            className=\"mt-2 text-xs\"\r\n                            onClick={() => {\r\n                              setCurrentExerciseIndex(idx);\r\n                              setExerciseNotes(exercise.notes || '');\r\n                              setNotesDialogOpen(true);\r\n                            }}\r\n                          >\r\n                            <Edit className=\"h-3 w-3 mr-1\" />\r\n                            Add Notes\r\n                          </Button>\r\n                        )}\r\n                      </CardContent>\r\n                    </Card>\r\n                  );\r\n                })}\r\n              </div>\r\n            </ScrollArea>\r\n          </div>\r\n          \r\n          <div>\r\n            <Card className=\"sticky top-4\">\r\n              <CardContent className=\"p-4\">\r\n                <h3 className=\"font-medium text-lg mb-2\">Workout Notes</h3>\r\n                \r\n                <Textarea\r\n                  placeholder=\"Add notes about your workout here...\"\r\n                  value={notes}\r\n                  onChange={(e) => setNotes(e.target.value)}\r\n                  className=\"min-h-[150px] mb-4\"\r\n                />\r\n                \r\n                <Button onClick={handleSaveWorkoutNotes} className=\"w-full\">\r\n                  <Save className=\"h-4 w-4 mr-2\" />\r\n                  Save Notes\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        {/* Exercise Log Dialog */}\r\n      <Dialog open={exerciseLogOpen} onOpenChange={setExerciseLogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Log Exercise Set</DialogTitle>\r\n            <DialogDescription>\r\n              Record details for {currentLogExercise?.name} - Set {(currentLogExercise?.setsCompleted || 0) + 1}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"grid gap-4 py-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"weight\">Weight</Label>\r\n                <Input\r\n                  id=\"weight\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  value={currentWeight}\r\n                  onChange={(e) => setCurrentWeight(Number(e.target.value))}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"reps\">Reps</Label>\r\n                <Input\r\n                  id=\"reps\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  value={currentReps}\r\n                  onChange={(e) => setCurrentReps(Number(e.target.value))}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"space-y-2\">\r\n              <Label>Rating (How difficult was this set?)</Label>\r\n              <div className=\"flex justify-between pt-2\">\r\n                {[1, 2, 3, 4, 5].map((rating) => (\r\n                  <Button\r\n                    key={rating}\r\n                    type=\"button\"\r\n                    variant={currentRating === rating ? \"default\" : \"outline\"}\r\n                    size=\"sm\"\r\n                    onClick={() => setCurrentRating(rating)}\r\n                    className=\"px-3\"\r\n                  >\r\n                    {rating}\r\n                    {rating === 1 && \" - Easy\"}\r\n                    {rating === 3 && \" - Normal\"}\r\n                    {rating === 5 && \" - Hard\"}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setExerciseLogOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleLogSubmit}>\r\n              Save\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n      {/* Exercise Notes Dialog */}\r\n      <Dialog open={notesDialogOpen} onOpenChange={setNotesDialogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Exercise Notes</DialogTitle>\r\n            <DialogDescription>\r\n              Add notes for {currentExerciseIndex !== null ? activeWorkout.exercises[currentExerciseIndex]?.name : ''}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"py-4\">\r\n            <Textarea\r\n              placeholder=\"Add notes about this exercise (form, modifications, etc.)...\"\r\n              value={exerciseNotes}\r\n              onChange={(e) => setExerciseNotes(e.target.value)}\r\n              className=\"min-h-[150px]\"\r\n            />\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setNotesDialogOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleSaveExerciseNotes}>\r\n              Save Notes\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n      {/* Complete Workout Confirmation */}\r\n      <Dialog open={confirmCompleteOpen} onOpenChange={setConfirmCompleteOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Complete Workout?</DialogTitle>\r\n            <DialogDescription>\r\n              Are you sure you want to finish this workout? This action will save your progress.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"py-4\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <span>Progress:</span>\r\n              <Badge>{calculateOverallProgress()}% Complete</Badge>\r\n            </div>\r\n            \r\n            <Progress value={calculateOverallProgress()} />\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setConfirmCompleteOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleCompleteWorkout}>\r\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\r\n              Complete Workout\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default ActiveWorkoutPage;\r\n"],"names":["__iconNode","ArrowLeft","createLucideIcon","Textarea","className","props","jsx","cn","useToast","toasts","setToasts","useState","prevToasts","ActiveWorkoutPage","activeWorkout","updateExerciseProgress","updateActiveWorkout","completeWorkout","addExerciseSet","useWorkoutTemplateStore","addWorkoutLog","useWorkoutLogStore","router","useRouter","toast","notes","setNotes","currentExerciseIndex","setCurrentExerciseIndex","exerciseLogOpen","setExerciseLogOpen","confirmCompleteOpen","setConfirmCompleteOpen","restTimerActive","setRestTimerActive","restStartTime","setRestStartTime","currentLogExercise","setCurrentLogExercise","exerciseNotes","setExerciseNotes","notesDialogOpen","setNotesDialogOpen","currentWeight","setCurrentWeight","currentReps","setCurrentReps","currentRating","setCurrentRating","defaultRestBetweenSets","defaultRestBetweenExercises","useEffect","firstIncompleteIdx","ex","formatElapsedTime","startTime","diffMs","minutes","hours","mins","formatRestTime","now","elapsedSec","secs","startRestTimer","duration","stopRestTimer","handleStopRestTimer","calculateOverallProgress","totalSets","completedSets","handleSetComplete","exerciseIndex","exercise","handleLogSubmit","currentSetsCompleted","updatedExercises","error","nextIncompleteIdx","idx","handleSaveExerciseNotes","handleSaveWorkoutNotes","handleCompleteWorkout","result","handleAddExtraSet","interval","DashboardLayout","jsxs","Button","Clock","Badge","CheckCircle","Card","CardContent","Progress","ScrollArea","isCompleted","isCurrent","Dumbbell","_","setIdx","isSetCompleted","Plus","Edit","e","Save","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","Label","Input","rating","DialogFooter","_a"],"mappings":"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","x_google_ignoreList":[0]}