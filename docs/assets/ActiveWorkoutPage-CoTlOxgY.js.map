{"version":3,"file":"ActiveWorkoutPage-CoTlOxgY.js","sources":["../../node_modules/lucide-react/dist/esm/icons/list.js","../../node_modules/lucide-react/dist/esm/icons/star.js","../../src/views/ActiveWorkoutPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M3 12h.01\", key: \"nlz23k\" }],\n  [\"path\", { d: \"M3 18h.01\", key: \"1tta3j\" }],\n  [\"path\", { d: \"M3 6h.01\", key: \"1rqtza\" }],\n  [\"path\", { d: \"M8 12h13\", key: \"1za7za\" }],\n  [\"path\", { d: \"M8 18h13\", key: \"1lx6n3\" }],\n  [\"path\", { d: \"M8 6h13\", key: \"ik3vkj\" }]\n];\nconst List = createLucideIcon(\"list\", __iconNode);\n\nexport { __iconNode, List as default };\n//# sourceMappingURL=list.js.map\n","/**\n * @license lucide-react v0.509.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\n    \"path\",\n    {\n      d: \"M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z\",\n      key: \"r04s7s\"\n    }\n  ]\n];\nconst Star = createLucideIcon(\"star\", __iconNode);\n\nexport { __iconNode, Star as default };\n//# sourceMappingURL=star.js.map\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { DashboardLayout } from '@/components/DashboardLayout';\r\nimport { useWorkoutTemplates, useWorkoutLogs, useExercises } from '@/hooks/useConsolidatedApp';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Dialog, DialogContent, DialogTitle, DialogDescription, DialogFooter, DialogHeader } from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { toast } from \"sonner\";\r\nimport { Dumbbell, Clock, CheckCircle, ArrowLeft, Save, Edit, Plus, Star, TrendingUp, List, Search, X, Trash2 } from \"lucide-react\";\r\nimport { useRouter } from '@/lib/utils';\r\nimport { WorkoutExercise } from '@/types/Workout_Templates';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// Autocomplete Input Component (similar to AddWorkoutLogModal)\r\ninterface AutocompleteInputProps {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  suggestions: string[];\r\n  placeholder: string;\r\n  className?: string;\r\n  key?: string | number;\r\n}\r\n\r\nconst AutocompleteInput: React.FC<AutocompleteInputProps> = ({\r\n  value,\r\n  onChange,\r\n  suggestions,\r\n  placeholder,\r\n  className\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [filteredSuggestions, setFilteredSuggestions] = useState<string[]>([]);\r\n  const [highlightedIndex, setHighlightedIndex] = useState(-1);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const componentMountedRef = useRef(true);\r\n\r\n  const resetState = () => {\r\n    if (!componentMountedRef.current) return;\r\n    setIsOpen(false);\r\n    setFilteredSuggestions([]);\r\n    setHighlightedIndex(-1);\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    componentMountedRef.current = true;\r\n    resetState();\r\n    return () => {\r\n      componentMountedRef.current = false;\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!componentMountedRef.current) return;\r\n    \r\n    try {\r\n      if (value && value.trim() && suggestions.length > 0) {\r\n        const filtered = suggestions.filter(suggestion =>\r\n          suggestion.toLowerCase().includes(value.toLowerCase())\r\n        );\r\n        setFilteredSuggestions(filtered);\r\n        if (document.activeElement === inputRef.current) {\r\n          setIsOpen(filtered.length > 0);\r\n        }\r\n      } else {\r\n        setFilteredSuggestions([]);\r\n        setIsOpen(false);\r\n      }\r\n      setHighlightedIndex(-1);\r\n    } catch (error) {\r\n      console.error('Error filtering suggestions:', error);\r\n      setFilteredSuggestions([]);\r\n      setIsOpen(false);\r\n      setHighlightedIndex(-1);\r\n    }\r\n  }, [value, suggestions]);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange(e.target.value);\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    onChange(suggestion);\r\n    resetState();\r\n    inputRef.current?.blur();\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (!isOpen || !componentMountedRef.current) return;\r\n\r\n    switch (e.key) {\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        setHighlightedIndex(prev => \r\n          prev < filteredSuggestions.length - 1 ? prev + 1 : prev\r\n        );\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        setHighlightedIndex(prev => prev > 0 ? prev - 1 : -1);\r\n        break;\r\n      case 'Enter':\r\n        e.preventDefault();\r\n        if (highlightedIndex >= 0 && filteredSuggestions[highlightedIndex]) {\r\n          handleSuggestionClick(filteredSuggestions[highlightedIndex]);\r\n        } else {\r\n          resetState();\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        e.preventDefault();\r\n        resetState();\r\n        inputRef.current?.blur();\r\n        break;\r\n      case 'Tab':\r\n        resetState();\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    timeoutRef.current = setTimeout(() => {\r\n      if (componentMountedRef.current) {\r\n        resetState();\r\n      }\r\n    }, 300);\r\n  };\r\n  \r\n  const handleFocus = () => {\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    if (value && value.trim() && componentMountedRef.current) {\r\n      const filtered = suggestions.filter(suggestion =>\r\n        suggestion.toLowerCase().includes(value.toLowerCase())\r\n      );\r\n      if (filtered.length > 0) {\r\n        setFilteredSuggestions(filtered);\r\n        setIsOpen(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Input\r\n        ref={inputRef}\r\n        value={value}\r\n        onChange={handleInputChange}\r\n        onKeyDown={handleKeyDown}\r\n        onBlur={handleBlur}\r\n        onFocus={handleFocus}\r\n        placeholder={placeholder}\r\n        className={className}\r\n      />\r\n      {isOpen && filteredSuggestions.length > 0 && (\r\n        <ul\r\n          className=\"absolute z-50 w-full mt-1 bg-background border border-border rounded-md shadow-lg max-h-60 overflow-auto\"\r\n          onMouseDown={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n        >\r\n          {filteredSuggestions.map((suggestion, index) => (\r\n            <li\r\n              key={suggestion}\r\n              onMouseDown={(e) => {\r\n                e.preventDefault();\r\n                handleSuggestionClick(suggestion);\r\n              }}\r\n              className={cn(\r\n                \"px-3 py-2 cursor-pointer text-foreground hover:bg-muted transition-colors\",\r\n                highlightedIndex === index && \"bg-muted\"\r\n              )}\r\n            >\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ActiveWorkoutPage: React.FC = () => {\r\n  const { activeWorkout, updateActiveWorkout, completeWorkout, addExerciseSet } = useWorkoutTemplates();\r\n  const { addWorkoutLog, getPreviousHighestVolumeWorkout } = useWorkoutLogs();\r\n  const { \r\n    exerciseGroups, \r\n    fetchExercises, \r\n    getExercisesByMuscleGroup, \r\n    getMuscleGroupsByExercise,\r\n    getAllUniqueExerciseNames \r\n  } = useExercises();\r\n  const router = useRouter();\r\n  \r\n  // Set up state\r\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState<number | null>(null);\r\n  const [exerciseLogOpen, setExerciseLogOpen] = useState(false);\r\n  const [confirmCompleteOpen, setConfirmCompleteOpen] = useState(false);\r\n  const [restTimerActive, setRestTimerActive] = useState(false);\r\n  const [restStartTime, setRestStartTime] = useState<number | null>(null);\r\n  const [currentLogExercise, setCurrentLogExercise] = useState<{\r\n    name: string;\r\n    muscleGroup: string;\r\n    sets: number;\r\n    reps: number;\r\n    weight: number;\r\n    setsCompleted?: number;\r\n    index: number;\r\n    rating?: number;\r\n  } | null>(null);\r\n  const [currentWeight, setCurrentWeight] = useState<number>(0);\r\n  const [currentReps, setCurrentReps] = useState<number>(0);\r\n  const [currentRating, setCurrentRating] = useState<number>(5); // Default rating (1-10)\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  \r\n  // New state for search and add exercise functionality\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [addExerciseOpen, setAddExerciseOpen] = useState(false);\r\n  const [editExerciseOpen, setEditExerciseOpen] = useState(false);\r\n  const [editingExerciseIndex, setEditingExerciseIndex] = useState<number | null>(null);\r\n  const [pinnedExerciseIndex, setPinnedExerciseIndex] = useState<number | null>(null);\r\n  const [newExercise, setNewExercise] = useState({\r\n    name: \"\",\r\n    muscleGroup: \"\",\r\n    sets: 3,\r\n    reps: 10,\r\n    weight: 0,\r\n    rest: 60\r\n  });\r\n  const [addExerciseKey, setAddExerciseKey] = useState(0); // For forcing autocomplete reset\r\n  \r\n  // API retry state\r\n  const [isRetryingApi, setIsRetryingApi] = useState(false);\r\n  \r\n  // Ref for exercise cards to enable scrolling\r\n  const exerciseRefs = useRef<(HTMLDivElement | null)[]>([]);\r\n    // Define proper type for volume workouts\r\n  type WorkoutAnalysisSet = {\r\n    id: string;\r\n    weight: number;\r\n    reps: number;\r\n    rating: number;\r\n    restTime: number | null;\r\n    volume: number;\r\n    used?: boolean;\r\n  };\r\n  \r\n  // Ensure this type matches what getPreviousHighestVolumeWorkout returns\r\n  interface WorkoutAnalysis {\r\n    date: string;\r\n    totalVolume: number;\r\n    maxWeight: number;\r\n    totalReps: number;\r\n    weight: number;\r\n    reps: number;\r\n    highestVolumeDate: string;\r\n    totalSets: number;\r\n    allSets: WorkoutAnalysisSet[];\r\n    highestVolume: {\r\n      date: string;\r\n      totalVolume: number;\r\n      maxWeight: number;\r\n      totalReps: number;\r\n      weight: number;\r\n      reps: number;\r\n    };\r\n    progressionTargets: {\r\n      targetVolume: number;\r\n      progressionRate: number;\r\n      sameWeightMoreReps: {\r\n        weight: number;\r\n        reps: number;\r\n        additionalReps: number;\r\n        sets: number;\r\n      };\r\n      moreSets: {\r\n        weight: number;\r\n        reps: number;\r\n        additionalSets: number;\r\n        sets: number;\r\n      };\r\n      balancedProgression: {\r\n        weight: number;\r\n        reps: number;\r\n        additionalReps: number;\r\n        sets: number;\r\n        additionalSets: number;\r\n      }\r\n    }\r\n  };\r\n  \r\n  const [previousHighestVolumeWorkouts, setPreviousHighestVolumeWorkouts] = useState<{[key: string]: WorkoutAnalysis | null}>({});\r\n  \r\n  // Set up defaults\r\n  const defaultRestBetweenSets = 60; // seconds\r\n  const defaultRestBetweenExercises = 90; // seconds\r\n\r\n  // Fetch exercises data when component mounts\r\n  useEffect(() => {\r\n    if (exerciseGroups.length === 0) {\r\n      fetchExercises();\r\n    }\r\n  }, [exerciseGroups.length, fetchExercises]);\r\n\r\n  // Get dynamic options based on current selections (like AddWorkoutLogModal)\r\n  const currentMuscleGroup = newExercise.muscleGroup;\r\n  const currentExerciseName = newExercise.name;\r\n\r\n  // Get muscle groups from API data with error handling\r\n  const availableMuscleGroups = useMemo(() => {\r\n    try {\r\n      return exerciseGroups.map(group => group.muscleGroup).filter(Boolean);\r\n    } catch (error) {\r\n      console.error('Error getting muscle groups:', error);\r\n      return [];\r\n    }\r\n  }, [exerciseGroups]);\r\n\r\n  // Get exercises based on current muscle group selection or all exercises\r\n  const availableExercises = useMemo(() => {\r\n    try {\r\n      return currentMuscleGroup \r\n        ? getExercisesByMuscleGroup(currentMuscleGroup)\r\n        : getAllUniqueExerciseNames();\r\n    } catch (error) {\r\n      console.error('Error getting exercises:', error);\r\n      return [];\r\n    }\r\n  }, [currentMuscleGroup, getExercisesByMuscleGroup, getAllUniqueExerciseNames]);\r\n\r\n  // Handle muscle group change - cross-selection logic\r\n  const handleMuscleGroupChange = (muscleGroup: string) => {\r\n    setNewExercise(prev => ({ ...prev, muscleGroup }));\r\n    \r\n    // If current exercise doesn't belong to selected muscle group, clear it\r\n    if (currentExerciseName && muscleGroup) {\r\n      try {\r\n        const exerciseMuscleGroups = getMuscleGroupsByExercise(currentExerciseName);\r\n        if (!exerciseMuscleGroups.includes(muscleGroup)) {\r\n          setNewExercise(prev => ({ ...prev, name: \"\" }));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking exercise muscle groups:', error);\r\n        // In case of error, clear the exercise to be safe\r\n        setNewExercise(prev => ({ ...prev, name: \"\" }));\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle exercise change - cross-selection logic\r\n  const handleExerciseChange = (exercise: string) => {\r\n    setNewExercise(prev => ({ ...prev, name: exercise }));\r\n    \r\n    // If no muscle group selected or current muscle group doesn't match exercise, update it\r\n    if (!currentMuscleGroup && exercise) {\r\n      try {\r\n        const exerciseMuscleGroups = getMuscleGroupsByExercise(exercise);\r\n        if (exerciseMuscleGroups.length > 0) {\r\n          setNewExercise(prev => ({ ...prev, muscleGroup: exerciseMuscleGroups[0] }));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error getting muscle groups for exercise:', error);\r\n      }\r\n    } else if (currentMuscleGroup && exercise) {\r\n      try {\r\n        const exerciseMuscleGroups = getMuscleGroupsByExercise(exercise);\r\n        if (!exerciseMuscleGroups.includes(currentMuscleGroup)) {\r\n          if (exerciseMuscleGroups.length > 0) {\r\n            setNewExercise(prev => ({ ...prev, muscleGroup: exerciseMuscleGroups[0] }));\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error validating muscle group for exercise:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Check if we have an active workout, if not redirect to dashboard\r\n  useEffect(() => {\r\n    if (!activeWorkout) {\r\n      router.push('/');\r\n    } else {\r\n      // Find the first incomplete exercise\r\n      const firstIncompleteIdx = activeWorkout.exercises.findIndex(\r\n        ex => (ex.setsCompleted || 0) < ex.sets\r\n      );\r\n      \r\n      if (firstIncompleteIdx !== -1) {\r\n        setCurrentExerciseIndex(firstIncompleteIdx);\r\n      }\r\n    }\r\n  }, [activeWorkout, router]);\r\n  \r\n  // Update form values when currentLogExercise changes\r\n  useEffect(() => {\r\n    if (currentLogExercise) {\r\n      setCurrentWeight(currentLogExercise.weight || 0);\r\n      setCurrentReps(currentLogExercise.reps || 0);\r\n    }\r\n  }, [currentLogExercise]);\r\n  \r\n  // Format time since workout started\r\n  const formatElapsedTime = () => {\r\n    if (!activeWorkout) return \"00:00\";\r\n    \r\n    const startTime = new Date(activeWorkout.startTime);\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - startTime.getTime();\r\n    \r\n    const minutes = Math.floor((diffMs / 1000) / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    \r\n    return `${hours > 0 ? `${hours}h ` : ''}${mins < 10 ? '0' : ''}${mins}m`;\r\n  };\r\n\r\n  // Format rest timer\r\n  const formatRestTime = () => {\r\n    if (!restTimerActive || !restStartTime) return \"00:00\";\r\n    \r\n    const now = Date.now();\r\n    const elapsedSec = Math.floor((now - restStartTime) / 1000);\r\n    \r\n    const mins = Math.floor(elapsedSec / 60);\r\n    const secs = elapsedSec % 60;\r\n    \r\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\r\n  };\r\n\r\n  // Start the rest timer\r\n  const startRestTimer = (duration = defaultRestBetweenSets) => {\r\n    setRestStartTime(Date.now());\r\n    setRestTimerActive(true);\r\n    \r\n    toast(\"Rest Timer Started\", {\r\n      description: `Rest timer started for ${duration} seconds`,\r\n    });\r\n  };\r\n\r\n  // Stop the rest timer and return elapsed time in seconds\r\n  const stopRestTimer = () => {\r\n    if (!restStartTime) return 0;\r\n    \r\n    const elapsedSeconds = Math.round((Date.now() - restStartTime) / 1000);\r\n    setRestTimerActive(false);\r\n    setRestStartTime(null);\r\n    \r\n    return elapsedSeconds;\r\n  };\r\n\r\n  // Function to manually stop the rest timer (can be called from UI)\r\n  const handleStopRestTimer = () => {\r\n    stopRestTimer();\r\n    toast(\"Rest Timer Stopped\", {\r\n      description: \"Rest timer has been stopped\",\r\n    });\r\n  };\r\n  \r\n  // Calculate overall progress\r\n  const calculateOverallProgress = () => {\r\n    if (!activeWorkout || !activeWorkout.exercises) return 0;\r\n    \r\n    let totalSets = 0;\r\n    let completedSets = 0;\r\n    \r\n    activeWorkout.exercises.forEach(ex => {\r\n      totalSets += ex.sets;\r\n      completedSets += ex.setsCompleted || 0;\r\n    });\r\n    \r\n    return totalSets === 0 ? 0 : Math.round((completedSets / totalSets) * 100);\r\n  };\r\n\r\n  // API retry logic with auth token refresh\r\n  const retryApiWithAuth = async (apiCall: () => Promise<void>, maxRetries = 3): Promise<boolean> => {\r\n    setIsRetryingApi(true);\r\n    \r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        await apiCall();\r\n        setIsRetryingApi(false);\r\n        return true; // Success\r\n      } catch (error) {\r\n        console.error(`API attempt ${attempt} failed:`, error);\r\n        \r\n        if (attempt < maxRetries) {\r\n          // Wait 10 seconds before retry\r\n          await new Promise(resolve => setTimeout(resolve, 10000));\r\n          \r\n          // Refresh auth token before retry (if you have an auth refresh function)\r\n          try {\r\n            // Add your auth refresh logic here if available\r\n            // await refreshAuthToken();\r\n          } catch (authError) {\r\n            console.error('Auth token refresh failed:', authError);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    setIsRetryingApi(false);\r\n    return false; // All retries failed\r\n  };\r\n\r\n  // Handle set complete with improved API logic\r\n  const handleSetComplete = (exerciseIndex: number) => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const exercise = activeWorkout.exercises[exerciseIndex];\r\n    const currentSetsCompleted = exercise.setsCompleted || 0;\r\n    \r\n    if (currentSetsCompleted < exercise.sets) {\r\n      // Pin the exercise to top for easy access\r\n      setPinnedExerciseIndex(exerciseIndex);\r\n      \r\n      // Get previous highest volume workout for this exercise and muscle group\r\n      const rawPrevHighestVolume = getPreviousHighestVolumeWorkout(exercise.name, exercise.muscleGroup);\r\n      \r\n      // Convert the returned data to our local interface format with proper typing\r\n      let typedPrevHighestVolume: WorkoutAnalysis | null = null;\r\n      \r\n      if (rawPrevHighestVolume) {\r\n        typedPrevHighestVolume = {\r\n          ...rawPrevHighestVolume,\r\n          // Ensure proper types for allSets\r\n          allSets: rawPrevHighestVolume.allSets?.map(set => ({\r\n            id: set.id,\r\n            weight: set.weight,\r\n            reps: set.reps,\r\n            rating: set.rating,\r\n            restTime: set.restTime === undefined ? null : set.restTime,\r\n            volume: set.volume,\r\n            used: false // Initialize as unused\r\n          })) || []\r\n        };\r\n      }\r\n      \r\n      // Open the exercise log dialog\r\n      setCurrentExerciseIndex(exerciseIndex);\r\n      setCurrentWeight(exercise.weight || 0);\r\n      setCurrentReps(exercise.reps || 0);\r\n      setCurrentRating(5); // Default rating\r\n      setCurrentLogExercise({\r\n        ...exercise,\r\n        index: exerciseIndex\r\n      });\r\n      \r\n      // Store the previous highest volume workout data for this exercise\r\n      if (typedPrevHighestVolume) {\r\n        setPreviousHighestVolumeWorkouts(prev => {\r\n          const newState = { ...prev };\r\n          newState[`${exercise.name}_${exercise.muscleGroup}`] = typedPrevHighestVolume;\r\n          return newState;\r\n        });\r\n      }\r\n      \r\n      setExerciseLogOpen(true);\r\n    }\r\n  };\r\n  \r\n  // Handle log submission with improved API logic\r\n  const handleLogSubmit = async () => {\r\n    if (!activeWorkout || currentExerciseIndex === null || !currentLogExercise) return;\r\n    \r\n    setIsSaving(true);\r\n    \r\n    try {\r\n      const exerciseIndex = currentLogExercise.index;\r\n      const exercise = activeWorkout.exercises[exerciseIndex];\r\n      const currentSetsCompleted = exercise.setsCompleted || 0;\r\n      \r\n      if (currentSetsCompleted < exercise.sets) {\r\n        // Get the actual rest time from the timer (if active) or use default\r\n        const actualRestTime = restTimerActive && restStartTime \r\n          ? Math.round((Date.now() - restStartTime) / 1000)\r\n          : exercise.rest || defaultRestBetweenSets;\r\n        \r\n        // Prepare workout log data\r\n        const workoutLogData = {\r\n          date: new Date().toISOString().split(\"T\")[0],\r\n          muscleGroup: exercise.muscleGroup,\r\n          exercise: exercise.name,\r\n          sets: exercise.sets,\r\n          reps: currentReps,\r\n          weight: currentWeight,\r\n          rating: currentRating,\r\n          restTime: actualRestTime\r\n        };\r\n        \r\n        // Create API call function for retry logic\r\n        const apiCall = async () => {\r\n          await addWorkoutLog(workoutLogData);\r\n        };\r\n        \r\n        // Try API call with retry logic and timeout\r\n        const apiCallPromise = retryApiWithAuth(apiCall);\r\n        const timeoutPromise = new Promise<boolean>((resolve) => {\r\n          setTimeout(() => resolve(false), 30000); // 30 second timeout\r\n        });\r\n        \r\n        // Wait for either API success or timeout\r\n        const apiSuccess = await Promise.race([apiCallPromise, timeoutPromise]);\r\n        \r\n        // Always update the exercise progress regardless of API result\r\n        const updatedExercises = [...activeWorkout.exercises];\r\n        updatedExercises[exerciseIndex] = {\r\n          ...updatedExercises[exerciseIndex],\r\n          weight: currentWeight,\r\n          reps: currentReps,\r\n          setsCompleted: currentSetsCompleted + 1,\r\n          percentComplete: ((currentSetsCompleted + 1) / exercise.sets) * 100\r\n        };\r\n        \r\n        // Update the active workout\r\n        updateActiveWorkout({ exercises: updatedExercises });\r\n        \r\n        // Mark a set as used after completion\r\n        if (currentLogExercise) {\r\n          const workoutKey = `${exercise.name}_${exercise.muscleGroup}`;\r\n          const prevWorkout = previousHighestVolumeWorkouts[workoutKey];\r\n          \r\n          if (prevWorkout && prevWorkout.allSets && prevWorkout.allSets.length > 0) {\r\n            const updatedSets = [...prevWorkout.allSets];\r\n            const unusedSetIndex = updatedSets.findIndex(set => !set.used);\r\n            \r\n            if (unusedSetIndex !== -1) {\r\n              updatedSets[unusedSetIndex] = {\r\n                ...updatedSets[unusedSetIndex],\r\n                used: true\r\n              };\r\n              setPreviousHighestVolumeWorkouts(prev => {\r\n                const newState = { ...prev };\r\n                if (newState[workoutKey]) {\r\n                  newState[workoutKey] = {\r\n                    ...newState[workoutKey]!,\r\n                    allSets: updatedSets\r\n                  };\r\n                }\r\n                return newState;\r\n              });\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Show appropriate toast message\r\n        if (apiSuccess) {\r\n          toast.success(\"Set Completed\", {\r\n            description: `${exercise.name} set ${currentSetsCompleted + 1}/${exercise.sets} logged successfully`,\r\n          });\r\n        } else if (isRetryingApi) {\r\n          toast.warning(\"Set Completed (Retrying)\", {\r\n            description: `${exercise.name} set ${currentSetsCompleted + 1}/${exercise.sets} completed. Retrying to sync...`,\r\n          });\r\n        } else {\r\n          toast.success(\"Set Completed (Offline)\", {\r\n            description: `${exercise.name} set ${currentSetsCompleted + 1}/${exercise.sets} completed. Will sync when online.`,\r\n          });\r\n        }\r\n        \r\n        // Close the dialog\r\n        setExerciseLogOpen(false);\r\n        \r\n        // Check if all sets are complete\r\n        if (currentSetsCompleted + 1 >= exercise.sets) {\r\n          // Unpin exercise when all sets are complete\r\n          setPinnedExerciseIndex(null);\r\n          \r\n          // Find next incomplete exercise\r\n          const nextIncompleteIdx = activeWorkout.exercises.findIndex(\r\n            (ex, idx) => idx > exerciseIndex && (ex.setsCompleted || 0) < ex.sets\r\n          );\r\n          \r\n          if (nextIncompleteIdx !== -1) {\r\n            // Start longer rest between exercises\r\n            startRestTimer(defaultRestBetweenExercises);\r\n            // Set the next exercise as current\r\n            setCurrentExerciseIndex(nextIncompleteIdx);\r\n          } else {\r\n            // Start regular rest timer\r\n            startRestTimer(exercise.rest || defaultRestBetweenSets);\r\n            \r\n            // All exercises complete\r\n            toast.success(\"Workout Complete\", {\r\n              description: \"All exercises have been completed! You can finish your workout.\",\r\n            });\r\n          }\r\n        } else {\r\n          // Start regular rest timer for the same exercise's next set\r\n          startRestTimer(exercise.rest || defaultRestBetweenSets);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to update exercise progress:\", err);\r\n      toast.error(\"Error\", {\r\n        description: \"Failed to update exercise progress. Please try again.\",\r\n      });\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n  \r\n  // Handle workout complete\r\n  const handleCompleteWorkout = async () => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const result = await completeWorkout();\r\n    if (result.success) {\r\n      toast.success(\"Workout Completed\", {\r\n        description: \"Your workout has been saved.\",\r\n      });\r\n      \r\n      router.push('/');\r\n    } else {\r\n      toast.error(\"Error\", {\r\n        description: result.error || \"Failed to complete workout\",\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Handle add extra set\r\n  const handleAddExtraSet = (exerciseIndex: number) => {\r\n    if (!activeWorkout) return;\r\n    addExerciseSet(exerciseIndex);\r\n    \r\n    toast(\"Set Added\", {\r\n      description: `Added an extra set to ${activeWorkout.exercises[exerciseIndex].name}`,\r\n    });\r\n  };\r\n\r\n  // Update UI when timer is active\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | null = null;\r\n    \r\n    if (restTimerActive) {\r\n      // Create a new interval that runs every 1000ms (1 second)\r\n      interval = setInterval(() => {\r\n        // This empty callback forces React to re-render\r\n        // which will update the timer display since formatRestTime reads current time\r\n        forceUpdate({});\r\n      }, 1000);\r\n    }\r\n    \r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [restTimerActive]);\r\n  \r\n  // Create a simple method to force component update\r\n  const [, forceUpdate] = useState({});\r\n  \r\n  // Search functionality\r\n  const handleSearch = () => {\r\n    if (!activeWorkout || !searchQuery.trim()) return;\r\n    \r\n    const foundIndex = activeWorkout.exercises.findIndex(exercise => \r\n      exercise.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      exercise.muscleGroup.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n    \r\n    if (foundIndex !== -1) {\r\n      // Scroll to the found exercise\r\n      exerciseRefs.current[foundIndex]?.scrollIntoView({ \r\n        behavior: 'smooth', \r\n        block: 'center' \r\n      });\r\n      \r\n      // Highlight the found exercise temporarily\r\n      setCurrentExerciseIndex(foundIndex);\r\n      \r\n      toast.success(\"Exercise Found\", {\r\n        description: `Found: ${activeWorkout.exercises[foundIndex].name}`\r\n      });\r\n    } else {\r\n      toast.error(\"Not Found\", {\r\n        description: \"No exercise matches your search\"\r\n      });\r\n    }\r\n  };\r\n\r\n  // Clear search\r\n  const handleClearSearch = () => {\r\n    setSearchQuery(\"\");\r\n  };\r\n\r\n  // Reset new exercise form\r\n  const resetNewExerciseForm = () => {\r\n    setNewExercise({\r\n      name: \"\",\r\n      muscleGroup: \"\",\r\n      sets: 3,\r\n      reps: 10,\r\n      weight: 0,\r\n      rest: 60\r\n    });\r\n    // Force autocomplete components to reset\r\n    setAddExerciseKey(prev => prev + 1);\r\n  };\r\n\r\n  // Handle adding new exercise\r\n  const handleAddNewExercise = async () => {\r\n    if (!activeWorkout || !newExercise.name.trim() || !newExercise.muscleGroup.trim()) {\r\n      toast.error(\"Missing Information\", {\r\n        description: \"Please fill in exercise name and muscle group\"\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Create a new exercise with all required fields\r\n    const exerciseToAdd: WorkoutExercise = {\r\n      name: newExercise.name.trim(),\r\n      muscleGroup: newExercise.muscleGroup.trim(),\r\n      sets: newExercise.sets,\r\n      reps: newExercise.reps,\r\n      weight: newExercise.weight,\r\n      rest: newExercise.rest,\r\n      notes: \"\", // Empty notes as requested\r\n      setsCompleted: 0,\r\n      percentComplete: 0,\r\n      // Add required fields for WorkoutExercise\r\n      difficultyLevel: 'Moderate',\r\n      equipmentRequired: 'None',\r\n      targetIntensity: 'Medium',\r\n      primaryMuscleGroup: newExercise.muscleGroup.trim(),\r\n      secondaryMuscleGroup: '',\r\n      exerciseDuration: '',\r\n      recoveryTime: '',\r\n      exerciseType: 'Strength',\r\n      caloriesBurned: '',\r\n      exerciseProgression: '',\r\n      injuryRiskLevel: 'Low',\r\n      exerciseLink: '',\r\n      imageLink: '',\r\n      relativePath: ''\r\n    };\r\n    \r\n    // Add the exercise to the current workout\r\n    const updatedExercises = [...activeWorkout.exercises, exerciseToAdd];\r\n    updateActiveWorkout({ exercises: updatedExercises });\r\n    \r\n    toast.success(\"Exercise Added\", {\r\n      description: `${newExercise.name} added to workout`\r\n    });\r\n    \r\n    // Close dialog and reset form\r\n    setAddExerciseOpen(false);\r\n    resetNewExerciseForm();\r\n  };\r\n\r\n  // Handle edit exercise\r\n  const handleEditExercise = (index: number) => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const exercise = activeWorkout.exercises[index];\r\n    setEditingExerciseIndex(index);\r\n    setNewExercise({\r\n      name: exercise.name,\r\n      muscleGroup: exercise.muscleGroup,\r\n      sets: exercise.sets,\r\n      reps: exercise.reps,\r\n      weight: exercise.weight,\r\n      rest: exercise.rest\r\n    });\r\n    setEditExerciseOpen(true);\r\n  };\r\n\r\n  // Handle save edited exercise\r\n  const handleSaveEditedExercise = async () => {\r\n    if (!activeWorkout || editingExerciseIndex === null || !newExercise.name.trim() || !newExercise.muscleGroup.trim()) {\r\n      toast.error(\"Missing Information\", {\r\n        description: \"Please fill in exercise name and muscle group\"\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const updatedExercises = [...activeWorkout.exercises];\r\n    const existingExercise = updatedExercises[editingExerciseIndex];\r\n    \r\n    // Update the exercise while preserving progress\r\n    updatedExercises[editingExerciseIndex] = {\r\n      ...existingExercise,\r\n      name: newExercise.name.trim(),\r\n      muscleGroup: newExercise.muscleGroup.trim(),\r\n      sets: newExercise.sets,\r\n      reps: newExercise.reps,\r\n      weight: newExercise.weight,\r\n      rest: newExercise.rest,\r\n      primaryMuscleGroup: newExercise.muscleGroup.trim(),\r\n      // Recalculate percentage if sets changed\r\n      percentComplete: existingExercise.setsCompleted ? \r\n        (existingExercise.setsCompleted / newExercise.sets) * 100 : 0\r\n    };\r\n    \r\n    updateActiveWorkout({ exercises: updatedExercises });\r\n    \r\n    toast.success(\"Exercise Updated\", {\r\n      description: `${newExercise.name} updated in workout`\r\n    });\r\n    \r\n    // Close dialog and reset form\r\n    setEditExerciseOpen(false);\r\n    setEditingExerciseIndex(null);\r\n    resetNewExerciseForm();\r\n  };\r\n\r\n  // Handle delete exercise\r\n  const handleDeleteExercise = async (index: number) => {\r\n    if (!activeWorkout) return;\r\n    \r\n    const exerciseToDelete = activeWorkout.exercises[index];\r\n    const updatedExercises = activeWorkout.exercises.filter((_, idx) => idx !== index);\r\n    \r\n    updateActiveWorkout({ exercises: updatedExercises });\r\n    \r\n    toast.success(\"Exercise Deleted\", {\r\n      description: `${exerciseToDelete.name} removed from workout`\r\n    });\r\n  };\r\n\r\n  if (!activeWorkout) {\r\n    return <div className=\"flex justify-center items-center h-full\">Loading workout...</div>;\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto p-4\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <div className=\"flex items-center\">\r\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => router.push('/')}>\r\n              <ArrowLeft className=\"h-5 w-5\" />\r\n            </Button>\r\n            <h1 className=\"text-2xl font-bold ml-2\">Active Workout</h1>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"flex items-center text-sm\">\r\n              <Clock className=\"h-4 w-4 mr-1 text-muted-foreground\" />\r\n              <span>{formatElapsedTime()}</span>\r\n            </div>            \r\n            {restTimerActive && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant=\"outline\" className=\"bg-primary/10 text-primary flex items-center gap-1\">\r\n                  <Clock className=\"h-3 w-3\" />\r\n                  Rest: {formatRestTime()}\r\n                </Badge>\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  className=\"h-6 px-2 text-xs\"\r\n                  onClick={handleStopRestTimer}\r\n                >\r\n                  Stop\r\n                </Button>\r\n              </div>\r\n            )}\r\n            \r\n            {isRetryingApi && (\r\n              <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200 flex items-center gap-1\">\r\n                <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\"></div>\r\n                Syncing...\r\n              </Badge>\r\n            )}\r\n            \r\n            <Button\r\n              variant=\"default\"\r\n              size=\"sm\"\r\n              onClick={() => setConfirmCompleteOpen(true)}\r\n            >\r\n              <CheckCircle className=\"h-4 w-4 mr-2\" /> \r\n              Finish Workout\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Workout Info */}\r\n        <Card className=\"mb-6\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex flex-col md:flex-row justify-between gap-4 mb-4\">\r\n              <div>\r\n                <h2 className=\"text-xl font-semibold\">{activeWorkout.templateName}</h2>\r\n                <p className=\"text-muted-foreground\">{activeWorkout.description}</p>\r\n              </div>\r\n              \r\n              <div className=\"flex flex-col\">\r\n                <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\r\n                  <span>Overall Progress:</span>\r\n                  <span className=\"font-medium\">{calculateOverallProgress()}%</span>\r\n                </div>\r\n                <Progress value={calculateOverallProgress()} className=\"w-40\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <div className=\"md:col-span-2\">\r\n            <div className=\"mb-4 flex justify-between items-center\">\r\n              <h2 className=\"text-lg font-semibold\">Exercises</h2>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setAddExerciseOpen(true)}\r\n              >\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add Exercise\r\n              </Button>\r\n            </div>\r\n            \r\n            {/* Search Bar */}\r\n            <div className=\"mb-4 flex gap-2\">\r\n              <div className=\"relative flex-1\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search exercises...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\r\n                  className=\"pl-10 pr-10\"\r\n                />\r\n                {searchQuery && (\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\r\n                    onClick={handleClearSearch}\r\n                  >\r\n                    <X className=\"h-3 w-3\" />\r\n                  </Button>\r\n                )}\r\n              </div>\r\n              <Button onClick={handleSearch} disabled={!searchQuery.trim()}>\r\n                <Search className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n            \r\n            <ScrollArea className=\"h-[calc(100vh-300px)]\">\r\n              <div className=\"space-y-4 pr-4\">\r\n                {(() => {\r\n                  // Separate pinned and unpinned exercises\r\n                  const exercises = activeWorkout.exercises;\r\n                  const pinnedExercise = pinnedExerciseIndex !== null ? exercises[pinnedExerciseIndex] : null;\r\n                  const unpinnedExercises = exercises.filter((_, idx) => idx !== pinnedExerciseIndex);\r\n                  \r\n                  // Create display array with pinned exercise first\r\n                  const displayExercises = [];\r\n                  if (pinnedExercise && pinnedExerciseIndex !== null) {\r\n                    displayExercises.push({ exercise: pinnedExercise, originalIndex: pinnedExerciseIndex, isPinned: true });\r\n                  }\r\n                  unpinnedExercises.forEach((exercise) => {\r\n                    const originalIndex = exercises.findIndex((ex, i) => ex === exercise && i !== pinnedExerciseIndex);\r\n                    displayExercises.push({ exercise, originalIndex, isPinned: false });\r\n                  });\r\n                  \r\n                  return displayExercises.map(({ exercise, originalIndex, isPinned }) => {\r\n                    const isCompleted = (exercise.setsCompleted || 0) >= exercise.sets;\r\n                    const isCurrent = originalIndex === currentExerciseIndex;\r\n                    \r\n                    return (\r\n                      <Card \r\n                        key={originalIndex} \r\n                        ref={(el) => { exerciseRefs.current[originalIndex] = el; }}\r\n                        className={`${\r\n                          isPinned ? 'border-primary bg-primary/10 shadow-lg' : \r\n                          isCurrent ? 'border-primary/50 bg-primary/5' : \r\n                          isCompleted ? 'border-muted bg-muted/20' : ''\r\n                        } ${isPinned ? 'relative' : ''}`}\r\n                      >\r\n                        {isPinned && (\r\n                          <div className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full font-medium\">\r\n                            📌 Active\r\n                          </div>\r\n                        )}\r\n                        <CardContent className=\"p-4\">\r\n                          <div className=\"flex justify-between items-start mb-3\">\r\n                            <div>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <Dumbbell className={`h-4 w-4 ${isCurrent || isPinned ? 'text-primary' : 'text-muted-foreground'}`} />\r\n                                <h3 className=\"font-medium text-lg\">\r\n                                  {exercise.name}\r\n                                </h3>\r\n                              </div>\r\n                              <div className=\"text-sm text-muted-foreground\">\r\n                                {exercise.sets} sets × {exercise.reps} reps\r\n                                {exercise.weight > 0 && ` @ ${exercise.weight}`}\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"flex items-center gap-2\">\r\n                              <Badge>\r\n                                {(exercise.setsCompleted || 0)}/{exercise.sets} Sets\r\n                              </Badge>\r\n                              <div className=\"flex gap-1\">\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-8 w-8 p-0\"\r\n                                  onClick={() => handleEditExercise(originalIndex)}\r\n                                  title=\"Edit exercise\"\r\n                                >\r\n                                  <Edit className=\"h-4 w-4\" />\r\n                                </Button>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\r\n                                  onClick={() => handleDeleteExercise(originalIndex)}\r\n                                  title=\"Delete exercise\"\r\n                                >\r\n                                  <Trash2 className=\"h-4 w-4\" />\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          <Progress \r\n                            value={((exercise.setsCompleted || 0) / exercise.sets) * 100} \r\n                            className=\"h-1.5 mb-4\"\r\n                          />\r\n                          \r\n                          <div className=\"flex flex-wrap gap-2\">\r\n                            {Array.from({ length: exercise.sets }).map((_, setIdx) => {\r\n                              const isSetCompleted = (exercise.setsCompleted || 0) > setIdx;\r\n                              \r\n                              return (\r\n                                <Button\r\n                                  key={setIdx}\r\n                                  size=\"sm\"\r\n                                  variant={isSetCompleted ? \"default\" : \"outline\"}\r\n                                  className={isSetCompleted ? \"opacity-70\" : \"\"}\r\n                                  onClick={() => !isSetCompleted && handleSetComplete(originalIndex)}\r\n                                  disabled={isSetCompleted}\r\n                                >\r\n                                  {isSetCompleted ? (\r\n                                    <CheckCircle className=\"h-3.5 w-3.5 mr-1\" />\r\n                                  ) : null}\r\n                                  Set {setIdx + 1}\r\n                                </Button>\r\n                              );\r\n                            })}\r\n                            \r\n                            {/* Button to add an extra set if all sets are completed */}\r\n                            {isCompleted && (\r\n                              <Button\r\n                                size=\"sm\"\r\n                                variant=\"secondary\"\r\n                                onClick={() => handleAddExtraSet(originalIndex)}\r\n                              >\r\n                                <Plus className=\"h-3.5 w-3.5 mr-1\" />\r\n                                Extra Set\r\n                              </Button>\r\n                            )}\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    );\r\n                  });\r\n                })()}\r\n              </div>\r\n            </ScrollArea>\r\n          </div>\r\n        </div>\r\n      </div>      {/* Exercise Log Dialog */}\r\n      <Dialog open={exerciseLogOpen} onOpenChange={setExerciseLogOpen}>\r\n        <DialogContent className=\"max-h-[90vh] flex flex-col\">\r\n          <DialogHeader className=\"flex-shrink-0\">\r\n            <DialogTitle>Log Exercise Set</DialogTitle>\r\n            <DialogDescription>\r\n              Record details for {currentLogExercise?.name} - Set {(currentLogExercise?.setsCompleted || 0) + 1}\r\n            </DialogDescription>\r\n          </DialogHeader>          {/* Scrollable content area */}\r\n          <div className=\"flex-1 overflow-y-auto min-h-0 py-2\">\r\n            {/* Previous highest volume record with progression targets */}\r\n            {currentLogExercise && previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`] && (\r\n              <div className=\"bg-muted/50 p-3 rounded-md border border-muted mb-4\">\r\n                <div className=\"flex items-center gap-1 text-sm font-medium mb-1 text-primary\">\r\n                  <TrendingUp className=\"h-4 w-4\" />\r\n                  <span>Previous Best ({previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.highestVolumeDate || 'N/A'})</span>\r\n                </div>\r\n\r\n              <div className=\"grid grid-cols-3 gap-2 text-sm mb-2\">\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Available Volume:</span>{\" \"}\r\n                  <span className=\"font-medium\">\r\n                    {(() => {\r\n                      const prevWorkout = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`];\r\n                      if (!prevWorkout?.allSets) return \"0\";\r\n                      \r\n                      // Calculate remaining volume (only from unused sets)\r\n                      const remainingVolume = prevWorkout.allSets\r\n                        .filter(set => !set.used)\r\n                        .reduce((sum, set) => sum + set.volume, 0);\r\n                      \r\n                      return remainingVolume.toFixed(1);\r\n                    })()}\r\n                  </span>\r\n                  {\" \"}\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    / {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.totalVolume?.toFixed(1)}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Max Weight:</span>{\" \"}\r\n                  <span className=\"font-medium\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.weight}</span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Available Sets:</span>{\" \"}\r\n                  <span className=\"font-medium\">\r\n                    {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.allSets?.filter(set => !set.used).length || 0}\r\n                    {\" \"}\r\n                    <span className=\"text-xs text-muted-foreground\">\r\n                    / {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.totalSets || 0}\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Detailed set information */}\r\n              <div className=\"text-xs mb-2\">\r\n                <div className=\"flex justify-between items-center mb-1\">\r\n                  <span className=\"font-medium text-primary/80 flex items-center gap-1\">\r\n                    <List className=\"h-3 w-3\" />\r\n                    <span>\r\n                      All Sets from Best Workout \r\n                      ({previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.allSets?.length || 0} total sets)\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n                <div className=\"bg-muted/70 rounded-md overflow-hidden\">\r\n                  <div className=\"grid grid-cols-5 gap-2 p-1.5 text-[10px] font-medium text-muted-foreground border-b border-border/30\">\r\n                    <div>Set</div>\r\n                    <div>Weight</div>\r\n                    <div>Reps</div>\r\n                    <div>Volume</div>\r\n                    <div>Status</div>\r\n                  </div>\r\n\r\n                  <div className=\"max-h-32 overflow-y-auto\">\r\n                    {(() => {\r\n                      const sets = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.allSets;\r\n                      console.log('Sets data for debugging:', {\r\n                        exercise: currentLogExercise.name,\r\n                        muscleGroup: currentLogExercise.muscleGroup,\r\n                        sets: sets,\r\n                        setsLength: sets?.length,\r\n                        firstSet: sets?.[0]\r\n                      });\r\n                      \r\n                      if (!sets || sets.length === 0) {\r\n                        return (\r\n                          <div className=\"p-2 text-center text-xs text-muted-foreground\">\r\n                            No previous workout data available\r\n                          </div>\r\n                        );\r\n                      }\r\n                      \r\n                      return sets.map((set, idx) => (\r\n                        <div \r\n                          key={set.id} \r\n                          className={`grid grid-cols-5 gap-2 p-1.5 text-[10px] border-b border-border/20 hover:bg-muted transition-colors cursor-pointer ${set.used ? 'opacity-60 bg-green-50' : ''}`}\r\n                          onClick={() => {\r\n                            setCurrentWeight(set.weight);\r\n                            setCurrentReps(set.reps);\r\n                          }}\r\n                        >\r\n                          <div>{idx + 1}</div>\r\n                          <div className=\"font-medium\">{set.weight}</div>\r\n                          <div className=\"font-medium\">{set.reps}</div>\r\n                          <div>{set.volume.toFixed(1)}</div>\r\n                          <div className={`text-[9px] ${set.used ? 'text-green-600' : 'text-muted-foreground'}`}>\r\n                            {set.used ? '✓ Used' : 'Available'}\r\n                          </div>\r\n                        </div>\r\n                      ));\r\n                    })()}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Progression targets */}\r\n              {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets && (\r\n                <>\r\n                  <div className=\"text-xs font-medium text-primary/80 mb-1 flex items-center gap-1\">\r\n                    <Star className=\"h-3 w-3\" />\r\n                    <span>Progression Targets ({previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.progressionRate.toFixed(1)}% increase)</span>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-1 gap-2 text-xs\">\r\n                    {/* Option 1: Same weight, more reps */}\r\n                    <div className=\"bg-muted/80 p-2 rounded-md mb-1 hover:bg-muted cursor-pointer transition-colors\"\r\n                         onClick={() => {\r\n                           const target = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps;\r\n                           if (target) {\r\n                             setCurrentWeight(target.weight);\r\n                             setCurrentReps(target.reps);\r\n                           }\r\n                         }}>\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-medium text-primary\">Option 1: More Reps</span>\r\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary text-[9px] h-4\">\r\n                          {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.sets} set{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.sets !== 1 ? 's' : ''}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2 mt-1\">\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Weight: </span>\r\n                          <span>{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.weight}</span>\r\n                        </div>\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Target Reps: </span>\r\n                          <span className=\"font-medium text-primary\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.reps}</span>\r\n                          <span className=\"text-green-500 text-[10px] ml-1\">(+{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.sameWeightMoreReps.additionalReps})</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-[10px] mt-1 text-muted-foreground\">\r\n                        Tap to apply these values\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Option 2: Same weight, same reps, more sets */}\r\n                    <div className=\"bg-muted/80 p-2 rounded-md mb-1 hover:bg-muted cursor-pointer transition-colors\"\r\n                         onClick={() => {\r\n                           const target = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets;\r\n                           if (target) {\r\n                             setCurrentWeight(target.weight);\r\n                             setCurrentReps(target.reps);\r\n                           }\r\n                         }}>\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-medium text-primary\">Option 2: More Sets</span>\r\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary text-[9px] h-4\">\r\n                          {previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.sets} set{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.sets !== 1 ? 's' : ''}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2 mt-1\">\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Weight: </span>\r\n                          <span>{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.weight}</span>\r\n                        </div>\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Reps: </span>\r\n                          <span>{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.reps}</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex justify-between mt-1\">\r\n                        <div className=\"text-[10px] text-muted-foreground\">\r\n                          Tap to apply these values\r\n                        </div>\r\n                        <div className=\"text-green-500 text-[10px]\">\r\n                          (+{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.moreSets.additionalSets} sets)\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Option 3: Balanced approach - same weight, moderate rep increase, moderate set increase */}\r\n                    <div className=\"bg-muted/80 p-2 rounded-md hover:bg-muted cursor-pointer transition-colors\"\r\n                         onClick={() => {\r\n                           const target = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression;\r\n                           if (target) {\r\n                             setCurrentWeight(target.weight);\r\n                             setCurrentReps(target.reps);\r\n                           }\r\n                         }}>\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-medium text-primary\">Option 3: Balanced</span>\r\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary text-[9px] h-4\">\r\n                          Recommended\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2 mt-1\">\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Weight: </span>\r\n                          <span className=\"font-medium text-primary\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression.weight}</span>\r\n                        </div>\r\n                        <div>\r\n                          <span className=\"text-muted-foreground\">Reps: </span>\r\n                          <span className=\"font-medium text-primary\">{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression.reps}</span>\r\n                          <span className=\"text-green-500 text-[10px] ml-1\">(+{previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets.balancedProgression.additionalReps})</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex justify-between mt-1\">\r\n                        <div className=\"text-[10px] text-muted-foreground\">\r\n                          Tap to apply these values\r\n                        </div>\r\n                        <div className=\"text-green-500 text-[10px]\">\r\n                          {(() => {\r\n                            const additionalSets = previousHighestVolumeWorkouts[`${currentLogExercise.name}_${currentLogExercise.muscleGroup}`]?.progressionTargets?.balancedProgression?.additionalSets;\r\n                            return additionalSets && additionalSets > 0 ? `(+${additionalSets} sets)` : '';\r\n                          })()}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>                </>\r\n              )}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"grid gap-4 py-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"weight\">Weight</Label>\r\n                <Input\r\n                  id=\"weight\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  value={currentWeight}\r\n                  onChange={(e) => setCurrentWeight(Number(e.target.value))}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"reps\">Reps</Label>\r\n                <Input\r\n                  id=\"reps\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  value={currentReps}\r\n                  onChange={(e) => setCurrentReps(Number(e.target.value))}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"space-y-2\">\r\n              <Label>Rating (How difficult was this set?)</Label>\r\n              <div className=\"grid grid-cols-5 gap-2 pt-2\">\r\n                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((rating) => (\r\n                  <Button\r\n                    key={rating}\r\n                    type=\"button\"\r\n                    variant={currentRating === rating ? \"default\" : \"outline\"}\r\n                    size=\"sm\"\r\n                    onClick={() => setCurrentRating(rating)}\r\n                    className=\"px-2 text-xs\"\r\n                  >\r\n                    {rating}\r\n                    {rating === 1 && <span className=\"hidden sm:inline\"> - Easy</span>}\r\n                    {rating === 5 && <span className=\"hidden sm:inline\"> - Normal</span>}\r\n                    {rating === 10 && <span className=\"hidden sm:inline\"> - Hard</span>}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n              <div className=\"text-xs text-muted-foreground text-center\">\r\n                1 = Very Easy → 10 = Very Hard\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n          \r\n          <DialogFooter className=\"flex-shrink-0 pt-4 border-t\">\r\n            <Button variant=\"outline\" onClick={() => setExerciseLogOpen(false)} disabled={isSaving}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleLogSubmit} disabled={isSaving}>\r\n              {isSaving ? (\r\n                <>\r\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                  </svg>\r\n                  Saving...\r\n                </>\r\n              ) : (\r\n                \"Save\"\r\n              )}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n      {/* Complete Workout Confirmation */}\r\n      <Dialog open={confirmCompleteOpen} onOpenChange={setConfirmCompleteOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Complete Workout?</DialogTitle>\r\n            <DialogDescription>\r\n              Are you sure you want to finish this workout? This action will save your progress.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"py-4\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <span>Progress:</span>\r\n              <Badge>{calculateOverallProgress()}% Complete</Badge>\r\n            </div>\r\n            \r\n            <Progress value={calculateOverallProgress()} />\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setConfirmCompleteOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleCompleteWorkout}>\r\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\r\n              Complete Workout\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n      {/* Add Exercise Dialog */}\r\n      <Dialog open={addExerciseOpen} onOpenChange={setAddExerciseOpen}>\r\n        <DialogContent className=\"max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle>Add New Exercise</DialogTitle>\r\n            <DialogDescription>\r\n              Add a new exercise to your current workout\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"grid gap-4 py-4\">\r\n            <div className=\"grid gap-2\">\r\n              <Label htmlFor=\"muscle-group\">Muscle Group</Label>\r\n              <AutocompleteInput\r\n                key={`muscle-group-${addExerciseKey}`}\r\n                value={newExercise.muscleGroup}\r\n                onChange={handleMuscleGroupChange}\r\n                suggestions={availableMuscleGroups}\r\n                placeholder=\"Type or select muscle group...\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"grid gap-2\">\r\n              <Label htmlFor=\"exercise-name\">Exercise Name</Label>\r\n              <AutocompleteInput\r\n                key={`exercise-name-${addExerciseKey}`}\r\n                value={newExercise.name}\r\n                onChange={handleExerciseChange}\r\n                suggestions={availableExercises}\r\n                placeholder=\"Type or select exercise...\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-3 gap-2\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"sets\">Sets</Label>\r\n                <Input\r\n                  id=\"sets\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={newExercise.sets}\r\n                  onChange={(e) => setNewExercise(prev => ({ ...prev, sets: Number(e.target.value) }))}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"reps\">Reps</Label>\r\n                <Input\r\n                  id=\"reps\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={newExercise.reps}\r\n                  onChange={(e) => setNewExercise(prev => ({ ...prev, reps: Number(e.target.value) }))}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"weight\">Weight</Label>\r\n                <Input\r\n                  id=\"weight\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={newExercise.weight}\r\n                  onChange={(e) => setNewExercise(prev => ({ ...prev, weight: Number(e.target.value) }))}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"grid gap-2\">\r\n              <Label htmlFor=\"rest\">Rest Time (seconds)</Label>\r\n              <Input\r\n                id=\"rest\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                value={newExercise.rest}\r\n                onChange={(e) => setNewExercise(prev => ({ ...prev, rest: Number(e.target.value) }))}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => {\r\n              setAddExerciseOpen(false);\r\n              resetNewExerciseForm();\r\n            }}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleAddNewExercise}>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Add Exercise\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n      {/* Edit Exercise Dialog */}\r\n      <Dialog open={editExerciseOpen} onOpenChange={setEditExerciseOpen}>\r\n        <DialogContent className=\"max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle>Edit Exercise</DialogTitle>\r\n            <DialogDescription>\r\n              Modify the exercise details\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"grid gap-4 py-4\">\r\n            <div className=\"grid gap-2\">\r\n              <Label htmlFor=\"edit-muscle-group\">Muscle Group</Label>\r\n              <AutocompleteInput\r\n                key={`edit-muscle-group-${addExerciseKey}`}\r\n                value={newExercise.muscleGroup}\r\n                onChange={handleMuscleGroupChange}\r\n                suggestions={availableMuscleGroups}\r\n                placeholder=\"Type or select muscle group...\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"grid gap-2\">\r\n              <Label htmlFor=\"edit-exercise-name\">Exercise Name</Label>\r\n              <AutocompleteInput\r\n                key={`edit-exercise-name-${addExerciseKey}`}\r\n                value={newExercise.name}\r\n                onChange={handleExerciseChange}\r\n                suggestions={availableExercises}\r\n                placeholder=\"Type or select exercise...\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-3 gap-2\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"edit-sets\">Sets</Label>\r\n                <Input\r\n                  id=\"edit-sets\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={newExercise.sets}\r\n                  onChange={(e) => setNewExercise(prev => ({ ...prev, sets: Number(e.target.value) }))}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"edit-reps\">Reps</Label>\r\n                <Input\r\n                  id=\"edit-reps\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={newExercise.reps}\r\n                  onChange={(e) => setNewExercise(prev => ({ ...prev, reps: Number(e.target.value) }))}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"edit-weight\">Weight</Label>\r\n                <Input\r\n                  id=\"edit-weight\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={newExercise.weight}\r\n                  onChange={(e) => setNewExercise(prev => ({ ...prev, weight: Number(e.target.value) }))}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"grid gap-2\">\r\n              <Label htmlFor=\"edit-rest\">Rest Time (seconds)</Label>\r\n              <Input\r\n                id=\"edit-rest\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                value={newExercise.rest}\r\n                onChange={(e) => setNewExercise(prev => ({ ...prev, rest: Number(e.target.value) }))}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => {\r\n              setEditExerciseOpen(false);\r\n              setEditingExerciseIndex(null);\r\n              resetNewExerciseForm();\r\n            }}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleSaveEditedExercise}>\r\n              <Save className=\"h-4 w-4 mr-2\" />\r\n              Save Changes\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default ActiveWorkoutPage;\r\n"],"names":["__iconNode","List","createLucideIcon","Star","AutocompleteInput","value","onChange","suggestions","placeholder","className","isOpen","setIsOpen","useState","filteredSuggestions","setFilteredSuggestions","highlightedIndex","setHighlightedIndex","inputRef","useRef","timeoutRef","componentMountedRef","resetState","useEffect","filtered","suggestion","error","handleInputChange","e","handleSuggestionClick","_a","handleKeyDown","prev","handleBlur","handleFocus","jsxs","jsx","Input","index","cn","ActiveWorkoutPage","activeWorkout","updateActiveWorkout","completeWorkout","addExerciseSet","useWorkoutTemplates","addWorkoutLog","getPreviousHighestVolumeWorkout","useWorkoutLogs","exerciseGroups","fetchExercises","getExercisesByMuscleGroup","getMuscleGroupsByExercise","getAllUniqueExerciseNames","useExercises","router","useRouter","currentExerciseIndex","setCurrentExerciseIndex","exerciseLogOpen","setExerciseLogOpen","confirmCompleteOpen","setConfirmCompleteOpen","restTimerActive","setRestTimerActive","restStartTime","setRestStartTime","currentLogExercise","setCurrentLogExercise","currentWeight","setCurrentWeight","currentReps","setCurrentReps","currentRating","setCurrentRating","isSaving","setIsSaving","searchQuery","setSearchQuery","addExerciseOpen","setAddExerciseOpen","editExerciseOpen","setEditExerciseOpen","editingExerciseIndex","setEditingExerciseIndex","pinnedExerciseIndex","setPinnedExerciseIndex","newExercise","setNewExercise","addExerciseKey","setAddExerciseKey","isRetryingApi","setIsRetryingApi","exerciseRefs","previousHighestVolumeWorkouts","setPreviousHighestVolumeWorkouts","defaultRestBetweenSets","defaultRestBetweenExercises","currentMuscleGroup","currentExerciseName","availableMuscleGroups","useMemo","group","availableExercises","handleMuscleGroupChange","muscleGroup","handleExerciseChange","exercise","exerciseMuscleGroups","firstIncompleteIdx","ex","formatElapsedTime","startTime","diffMs","minutes","hours","mins","formatRestTime","now","elapsedSec","secs","startRestTimer","duration","toast","stopRestTimer","elapsedSeconds","handleStopRestTimer","calculateOverallProgress","totalSets","completedSets","retryApiWithAuth","apiCall","maxRetries","attempt","resolve","handleSetComplete","exerciseIndex","rawPrevHighestVolume","typedPrevHighestVolume","set","newState","handleLogSubmit","currentSetsCompleted","actualRestTime","workoutLogData","apiCallPromise","timeoutPromise","apiSuccess","updatedExercises","workoutKey","prevWorkout","updatedSets","unusedSetIndex","nextIncompleteIdx","idx","err","handleCompleteWorkout","result","handleAddExtraSet","interval","forceUpdate","handleSearch","foundIndex","handleClearSearch","resetNewExerciseForm","handleAddNewExercise","exerciseToAdd","handleEditExercise","handleSaveEditedExercise","existingExercise","handleDeleteExercise","exerciseToDelete","_","DashboardLayout","Button","ArrowLeft","Clock","Badge","CheckCircle","Card","CardContent","Progress","Plus","Search","X","ScrollArea","exercises","pinnedExercise","unpinnedExercises","displayExercises","originalIndex","i","isPinned","isCompleted","isCurrent","el","Dumbbell","Edit","Trash2","setIdx","isSetCompleted","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","TrendingUp","sum","_c","_b","_d","_f","_e","_g","_i","_h","sets","_j","Fragment","_k","target","_l","_m","_n","_p","_q","_r","_s","_t","_u","_x","additionalSets","Label","rating","DialogFooter","Save"],"mappings":"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","x_google_ignoreList":[0,1]}